# Generated from VisualFoxpro9.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,312,2156,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,1,0,1,0,1,0,1,1,5,1,127,8,1,10,1,12,1,130,9,1,
        1,2,1,2,1,2,1,2,1,2,3,2,137,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,145,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,155,8,2,10,2,12,2,158,9,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,
        2,175,8,2,10,2,12,2,178,9,2,1,2,1,2,1,2,1,2,5,2,184,8,2,10,2,12,
        2,187,9,2,1,2,3,2,190,8,2,3,2,192,8,2,1,3,1,3,5,3,196,8,3,10,3,12,
        3,199,9,3,1,3,1,3,1,4,1,4,5,4,205,8,4,10,4,12,4,208,9,4,1,4,1,4,
        3,4,212,8,4,1,5,1,5,1,5,1,5,1,5,3,5,219,8,5,1,5,1,5,3,5,223,8,5,
        1,6,1,6,1,7,5,7,228,8,7,10,7,12,7,231,9,7,1,8,5,8,234,8,8,10,8,12,
        8,237,9,8,1,9,1,9,1,9,1,9,3,9,243,8,9,1,9,1,9,1,10,1,10,5,10,249,
        8,10,10,10,12,10,252,9,10,1,10,1,10,1,10,5,10,257,8,10,10,10,12,
        10,260,9,10,1,11,1,11,1,11,1,11,1,11,3,11,267,8,11,1,12,1,12,3,12,
        271,8,12,1,13,1,13,1,13,5,13,276,8,13,10,13,12,13,279,9,13,1,14,
        3,14,282,8,14,1,14,1,14,1,14,1,14,3,14,288,8,14,1,14,3,14,291,8,
        14,1,14,3,14,294,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,5,15,303,
        8,15,10,15,12,15,306,9,15,3,15,308,8,15,1,16,1,16,1,16,3,16,313,
        8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,322,8,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,334,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,344,8,18,1,18,1,18,3,18,348,8,
        18,1,19,1,19,1,19,3,19,353,8,19,3,19,355,8,19,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        5,23,374,8,23,10,23,12,23,377,9,23,1,23,5,23,380,8,23,10,23,12,23,
        383,9,23,1,23,3,23,386,8,23,1,23,1,23,1,24,3,24,391,8,24,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,404,8,26,1,
        26,1,26,1,26,1,26,1,27,1,27,3,27,412,8,27,1,27,1,27,3,27,416,8,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,
        430,8,28,10,28,12,28,433,9,28,1,28,1,28,3,28,437,8,28,1,28,1,28,
        1,28,3,28,442,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        3,29,453,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,5,30,468,8,30,10,30,12,30,471,9,30,3,30,473,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,481,8,30,1,30,1,30,1,30,1,30,
        4,30,487,8,30,11,30,12,30,488,3,30,491,8,30,1,30,1,30,1,30,1,30,
        3,30,497,8,30,1,30,1,30,1,30,3,30,502,8,30,1,30,1,30,1,30,1,30,1,
        30,5,30,509,8,30,10,30,12,30,512,9,30,1,30,1,30,1,30,1,30,1,30,5,
        30,519,8,30,10,30,12,30,522,9,30,3,30,524,8,30,1,30,1,30,1,30,1,
        30,1,30,1,30,5,30,532,8,30,10,30,12,30,535,9,30,1,30,1,30,1,30,1,
        30,3,30,541,8,30,1,30,1,30,3,30,545,8,30,1,30,1,30,1,30,3,30,550,
        8,30,1,30,1,30,1,30,5,30,555,8,30,10,30,12,30,558,9,30,1,30,1,30,
        1,30,3,30,563,8,30,1,30,1,30,3,30,567,8,30,1,30,3,30,570,8,30,1,
        30,3,30,573,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
        30,584,8,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,592,8,30,10,30,12,
        30,595,9,30,1,30,1,30,1,30,3,30,600,8,30,1,30,1,30,3,30,604,8,30,
        1,30,3,30,607,8,30,1,30,1,30,1,30,3,30,612,8,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,3,30,622,8,30,1,30,1,30,1,30,1,30,1,30,3,
        30,629,8,30,1,30,1,30,1,30,1,30,1,30,3,30,636,8,30,1,30,1,30,1,30,
        1,30,1,30,3,30,643,8,30,3,30,645,8,30,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,653,8,30,1,30,3,30,656,8,30,3,30,658,8,30,1,30,1,30,1,30,
        3,30,663,8,30,1,30,1,30,1,30,1,30,3,30,669,8,30,3,30,671,8,30,1,
        30,1,30,1,30,1,30,1,30,3,30,678,8,30,1,30,1,30,3,30,682,8,30,1,30,
        1,30,1,30,3,30,687,8,30,1,30,1,30,1,30,1,30,5,30,693,8,30,10,30,
        12,30,696,9,30,1,30,1,30,3,30,700,8,30,1,30,1,30,1,30,3,30,705,8,
        30,1,30,3,30,708,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,717,
        8,30,1,30,1,30,1,30,3,30,722,8,30,1,30,3,30,725,8,30,3,30,727,8,
        30,1,30,3,30,730,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,743,8,30,1,30,1,30,1,30,1,30,3,30,749,8,30,1,30,
        1,30,1,30,1,30,3,30,755,8,30,3,30,757,8,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,3,30,767,8,30,3,30,769,8,30,3,30,771,8,30,3,30,
        773,8,30,1,30,1,30,3,30,777,8,30,1,30,1,30,3,30,781,8,30,1,30,1,
        30,1,30,1,30,3,30,787,8,30,1,30,1,30,3,30,791,8,30,3,30,793,8,30,
        1,30,1,30,3,30,797,8,30,1,30,1,30,1,30,3,30,802,8,30,3,30,804,8,
        30,1,30,1,30,1,30,3,30,809,8,30,1,30,1,30,1,30,1,30,3,30,815,8,30,
        1,30,3,30,818,8,30,1,30,3,30,821,8,30,1,30,1,30,1,30,3,30,826,8,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,837,8,30,1,
        30,1,30,1,30,1,30,3,30,843,8,30,1,30,1,30,3,30,847,8,30,1,30,1,30,
        3,30,851,8,30,3,30,853,8,30,1,30,3,30,856,8,30,1,30,3,30,859,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,867,8,30,1,30,1,30,3,30,871,8,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,880,8,30,1,30,1,30,1,
        30,1,30,3,30,886,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,916,8,30,10,30,12,30,919,9,
        30,1,30,1,30,1,30,1,30,3,30,925,8,30,1,30,1,30,1,30,1,30,3,30,931,
        8,30,1,30,1,30,1,30,5,30,936,8,30,10,30,12,30,939,9,30,1,30,1,30,
        3,30,943,8,30,1,30,1,30,3,30,947,8,30,1,30,1,30,1,30,1,30,3,30,953,
        8,30,1,30,1,30,1,30,1,30,5,30,959,8,30,10,30,12,30,962,9,30,1,30,
        1,30,1,30,1,30,1,30,3,30,969,8,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,985,8,30,5,30,987,8,
        30,10,30,12,30,990,9,30,1,30,1,30,1,30,3,30,995,8,30,1,30,1,30,3,
        30,999,8,30,1,30,1,30,3,30,1003,8,30,1,30,1,30,3,30,1007,8,30,1,
        30,1,30,1,30,3,30,1012,8,30,1,30,1,30,1,30,3,30,1017,8,30,3,30,1019,
        8,30,1,30,1,30,1,30,1,30,1,30,3,30,1026,8,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,5,30,1035,8,30,10,30,12,30,1038,9,30,1,30,1,30,5,
        30,1042,8,30,10,30,12,30,1045,9,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,5,30,1055,8,30,10,30,12,30,1058,9,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,1066,8,30,1,30,3,30,1069,8,30,1,30,3,30,1072,8,
        30,1,30,3,30,1075,8,30,1,30,1,30,1,30,1,30,5,30,1081,8,30,10,30,
        12,30,1084,9,30,1,30,1,30,1,30,1,30,1,30,5,30,1091,8,30,10,30,12,
        30,1094,9,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,1103,8,30,10,
        30,12,30,1106,9,30,1,30,1,30,1,30,1,30,5,30,1112,8,30,10,30,12,30,
        1115,9,30,5,30,1117,8,30,10,30,12,30,1120,9,30,1,30,1,30,1,30,1,
        30,3,30,1126,8,30,1,30,1,30,5,30,1130,8,30,10,30,12,30,1133,9,30,
        1,30,1,30,1,30,1,30,5,30,1139,8,30,10,30,12,30,1142,9,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1153,8,30,1,30,1,30,3,
        30,1157,8,30,1,30,1,30,3,30,1161,8,30,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,1169,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
        30,1180,8,30,1,30,1,30,1,30,1,30,3,30,1186,8,30,1,30,1,30,1,30,1,
        30,1,30,3,30,1193,8,30,1,30,1,30,3,30,1197,8,30,1,30,1,30,3,30,1201,
        8,30,1,30,1,30,1,30,3,30,1206,8,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,3,30,1215,8,30,3,30,1217,8,30,1,30,1,30,3,30,1221,8,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1231,8,30,1,30,3,30,1234,
        8,30,1,30,3,30,1237,8,30,3,30,1239,8,30,1,30,1,30,3,30,1243,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,1256,
        8,30,10,30,12,30,1259,9,30,1,30,1,30,3,30,1263,8,30,1,30,1,30,1,
        30,1,30,1,30,5,30,1270,8,30,10,30,12,30,1273,9,30,1,30,1,30,1,30,
        1,30,3,30,1279,8,30,1,30,3,30,1282,8,30,1,30,1,30,3,30,1286,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,1294,8,30,1,30,1,30,5,30,1298,
        8,30,10,30,12,30,1301,9,30,1,30,1,30,3,30,1305,8,30,1,30,1,30,1,
        30,1,30,1,30,3,30,1312,8,30,1,30,1,30,5,30,1316,8,30,10,30,12,30,
        1319,9,30,1,30,1,30,1,30,3,30,1324,8,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,1333,8,30,1,30,1,30,5,30,1337,8,30,10,30,12,30,1340,
        9,30,1,30,1,30,1,30,3,30,1345,8,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,5,30,1354,8,30,10,30,12,30,1357,9,30,1,30,1,30,1,30,3,30,1362,
        8,30,1,30,3,30,1365,8,30,1,30,1,30,3,30,1369,8,30,1,30,1,30,3,30,
        1373,8,30,3,30,1375,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,1400,8,30,1,30,1,30,1,30,1,30,3,30,1406,8,30,1,30,
        1,30,1,30,1,30,3,30,1412,8,30,1,30,1,30,1,30,1,30,3,30,1418,8,30,
        1,30,5,30,1421,8,30,10,30,12,30,1424,9,30,1,30,1,30,3,30,1428,8,
        30,1,30,1,30,1,30,1,30,1,30,3,30,1435,8,30,1,30,3,30,1438,8,30,1,
        30,1,30,1,30,3,30,1443,8,30,1,30,5,30,1446,8,30,10,30,12,30,1449,
        9,30,1,30,1,30,1,30,1,30,3,30,1455,8,30,1,30,1,30,3,30,1459,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,5,30,1467,8,30,10,30,12,30,1470,9,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1479,8,30,1,30,1,30,1,
        30,3,30,1484,8,30,1,30,1,30,1,30,1,30,3,30,1490,8,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1517,8,30,3,
        30,1519,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,
        30,1531,8,30,10,30,12,30,1534,9,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,3,30,1547,8,30,1,30,1,30,1,30,3,30,1552,
        8,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,1560,8,31,1,32,5,32,1563,
        8,32,10,32,12,32,1566,9,32,1,33,1,33,1,33,5,33,1571,8,33,10,33,12,
        33,1574,9,33,1,34,1,34,3,34,1578,8,34,1,34,3,34,1581,8,34,1,35,1,
        35,1,35,3,35,1586,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1594,8,
        36,3,36,1596,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1605,8,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1614,8,36,3,36,1616,8,
        36,3,36,1618,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1625,8,36,1,36,1,
        36,3,36,1629,8,36,1,36,3,36,1632,8,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,3,36,1643,8,36,3,36,1645,8,36,1,36,1,36,1,36,3,
        36,1650,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,3,36,1664,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1683,8,36,3,36,1685,
        8,36,1,36,1,36,1,36,1,36,1,36,3,36,1692,8,36,1,36,1,36,3,36,1696,
        8,36,1,36,3,36,1699,8,36,1,36,1,36,1,36,3,36,1704,8,36,1,36,1,36,
        1,36,1,36,3,36,1710,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,3,36,1721,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1728,8,36,1,36,
        1,36,1,36,3,36,1733,8,36,1,36,1,36,3,36,1737,8,36,1,36,3,36,1740,
        8,36,3,36,1742,8,36,1,36,1,36,1,36,3,36,1747,8,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,3,36,1756,8,36,3,36,1758,8,36,3,36,1760,8,36,
        1,36,1,36,1,36,1,36,1,36,5,36,1767,8,36,10,36,12,36,1770,9,36,1,
        36,3,36,1773,8,36,3,36,1775,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1782,
        8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1791,8,36,1,36,3,36,
        1794,8,36,1,36,1,36,1,36,1,36,3,36,1800,8,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,1811,8,36,1,36,1,36,3,36,1815,8,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,
        1829,8,36,1,37,1,37,1,37,1,37,1,37,3,37,1836,8,37,3,37,1838,8,37,
        1,38,1,38,1,38,1,39,1,39,1,39,3,39,1846,8,39,1,40,1,40,3,40,1850,
        8,40,1,41,1,41,5,41,1854,8,41,10,41,12,41,1857,9,41,1,41,4,41,1860,
        8,41,11,41,12,41,1861,3,41,1864,8,41,1,42,1,42,1,42,5,42,1869,8,
        42,10,42,12,42,1872,9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,3,44,1898,8,44,1,44,1,44,3,44,1902,8,44,3,44,1904,
        8,44,1,44,1,44,1,44,1,44,3,44,1910,8,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,5,44,1933,8,44,10,44,12,44,1936,9,44,1,45,1,45,1,
        46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,1947,8,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,3,47,1957,8,47,1,47,1,47,3,47,1961,8,47,3,
        47,1963,8,47,1,48,1,48,3,48,1967,8,48,1,49,1,49,3,49,1971,8,49,1,
        49,1,49,1,49,3,49,1976,8,49,1,49,3,49,1979,8,49,1,49,3,49,1982,8,
        49,1,49,1,49,1,49,3,49,1987,8,49,3,49,1989,8,49,1,50,1,50,1,50,3,
        50,1994,8,50,1,50,4,50,1997,8,50,11,50,12,50,1998,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,2026,8,51,1,52,
        1,52,3,52,2030,8,52,1,53,3,53,2033,8,53,1,53,1,53,1,53,1,53,1,53,
        3,53,2040,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,3,53,2057,8,53,1,53,3,53,2060,8,53,1,53,
        1,53,1,53,1,53,1,53,3,53,2067,8,53,3,53,2069,8,53,1,53,3,53,2072,
        8,53,3,53,2074,8,53,1,53,1,53,1,53,5,53,2079,8,53,10,53,12,53,2082,
        9,53,1,53,1,53,1,53,5,53,2087,8,53,10,53,12,53,2090,9,53,1,53,1,
        53,1,53,5,53,2095,8,53,10,53,12,53,2098,9,53,1,53,3,53,2101,8,53,
        1,53,3,53,2104,8,53,1,54,3,54,2107,8,54,1,54,1,54,1,54,5,54,2112,
        8,54,10,54,12,54,2115,9,54,1,55,3,55,2118,8,55,1,55,1,55,3,55,2122,
        8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,3,57,2131,8,57,1,57,1,57,
        1,57,1,57,1,57,3,57,2138,8,57,1,57,1,57,3,57,2142,8,57,1,58,1,58,
        1,59,1,59,1,59,1,59,1,59,1,59,3,59,2152,8,59,1,60,1,60,1,60,2,235,
        1998,1,88,61,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,0,42,1,0,310,310,6,0,97,97,109,109,115,115,150,150,153,153,310,
        310,2,1,22,22,310,310,2,0,7,7,200,200,1,1,310,310,2,0,129,129,257,
        257,3,0,49,49,95,95,101,101,3,0,68,68,181,181,247,247,2,0,177,177,
        221,221,2,0,70,70,224,224,3,0,60,60,251,251,289,289,2,0,77,77,131,
        131,3,0,86,86,91,91,278,278,2,0,86,86,278,278,2,0,280,280,288,288,
        2,0,51,51,100,100,2,0,63,63,295,295,2,0,126,126,163,163,2,0,98,98,
        230,230,2,0,91,91,173,173,3,0,87,87,155,155,278,278,2,0,21,21,249,
        249,5,0,70,70,87,87,139,139,161,161,241,241,3,0,172,172,180,180,
        196,196,1,0,118,118,1,0,52,53,1,0,208,209,3,0,90,90,141,141,208,
        209,2,0,195,195,227,227,1,0,98,99,2,0,233,233,299,299,1,0,8,9,3,
        0,21,21,199,199,213,213,2,0,7,7,10,10,4,0,19,20,22,26,28,28,31,31,
        2,0,47,47,212,212,2,0,210,210,214,214,2,0,59,59,204,204,2,0,35,35,
        310,310,2,0,34,34,310,310,2,0,13,13,310,310,3,0,39,89,91,211,215,
        309,2692,0,122,1,0,0,0,2,128,1,0,0,0,4,191,1,0,0,0,6,197,1,0,0,0,
        8,211,1,0,0,0,10,222,1,0,0,0,12,224,1,0,0,0,14,229,1,0,0,0,16,235,
        1,0,0,0,18,238,1,0,0,0,20,246,1,0,0,0,22,266,1,0,0,0,24,268,1,0,
        0,0,26,272,1,0,0,0,28,281,1,0,0,0,30,297,1,0,0,0,32,309,1,0,0,0,
        34,316,1,0,0,0,36,347,1,0,0,0,38,354,1,0,0,0,40,356,1,0,0,0,42,360,
        1,0,0,0,44,365,1,0,0,0,46,369,1,0,0,0,48,390,1,0,0,0,50,396,1,0,
        0,0,52,400,1,0,0,0,54,409,1,0,0,0,56,421,1,0,0,0,58,452,1,0,0,0,
        60,1551,1,0,0,0,62,1559,1,0,0,0,64,1564,1,0,0,0,66,1567,1,0,0,0,
        68,1575,1,0,0,0,70,1582,1,0,0,0,72,1828,1,0,0,0,74,1837,1,0,0,0,
        76,1839,1,0,0,0,78,1842,1,0,0,0,80,1847,1,0,0,0,82,1863,1,0,0,0,
        84,1865,1,0,0,0,86,1873,1,0,0,0,88,1903,1,0,0,0,90,1937,1,0,0,0,
        92,1939,1,0,0,0,94,1962,1,0,0,0,96,1966,1,0,0,0,98,1988,1,0,0,0,
        100,1993,1,0,0,0,102,2025,1,0,0,0,104,2029,1,0,0,0,106,2103,1,0,
        0,0,108,2106,1,0,0,0,110,2117,1,0,0,0,112,2123,1,0,0,0,114,2141,
        1,0,0,0,116,2143,1,0,0,0,118,2151,1,0,0,0,120,2153,1,0,0,0,122,123,
        3,2,1,0,123,124,5,0,0,1,124,1,1,0,0,0,125,127,3,4,2,0,126,125,1,
        0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,3,1,0,
        0,0,130,128,1,0,0,0,131,136,5,22,0,0,132,133,5,150,0,0,133,137,3,
        88,44,0,134,135,5,151,0,0,135,137,3,120,60,0,136,132,1,0,0,0,136,
        134,1,0,0,0,137,138,1,0,0,0,138,139,5,310,0,0,139,144,3,2,1,0,140,
        141,5,22,0,0,141,142,5,109,0,0,142,143,5,310,0,0,143,145,3,2,1,0,
        144,140,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,5,22,0,0,
        147,148,5,115,0,0,148,149,3,12,6,0,149,192,1,0,0,0,150,151,5,22,
        0,0,151,152,5,97,0,0,152,156,3,120,60,0,153,155,8,0,0,0,154,153,
        1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,
        1,0,0,0,158,156,1,0,0,0,159,160,3,12,6,0,160,192,1,0,0,0,161,162,
        5,22,0,0,162,163,5,294,0,0,163,164,3,120,60,0,164,165,3,12,6,0,165,
        192,1,0,0,0,166,167,5,22,0,0,167,168,5,153,0,0,168,169,3,104,52,
        0,169,170,3,12,6,0,170,192,1,0,0,0,171,172,5,22,0,0,172,176,8,1,
        0,0,173,175,8,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,
        0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,192,3,12,
        6,0,180,190,5,310,0,0,181,185,8,2,0,0,182,184,8,0,0,0,183,182,1,
        0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,188,1,
        0,0,0,187,185,1,0,0,0,188,190,3,12,6,0,189,180,1,0,0,0,189,181,1,
        0,0,0,190,192,1,0,0,0,191,131,1,0,0,0,191,150,1,0,0,0,191,161,1,
        0,0,0,191,166,1,0,0,0,191,171,1,0,0,0,191,189,1,0,0,0,192,5,1,0,
        0,0,193,196,3,20,10,0,194,196,3,30,15,0,195,193,1,0,0,0,195,194,
        1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,
        1,0,0,0,199,197,1,0,0,0,200,201,5,0,0,1,201,7,1,0,0,0,202,206,7,
        3,0,0,203,205,8,0,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,
        0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,212,3,
        12,6,0,210,212,5,310,0,0,211,202,1,0,0,0,211,210,1,0,0,0,212,9,1,
        0,0,0,213,223,3,8,4,0,214,215,5,38,0,0,215,223,3,12,6,0,216,219,
        3,58,29,0,217,219,3,60,30,0,218,216,1,0,0,0,218,217,1,0,0,0,219,
        220,1,0,0,0,220,221,3,12,6,0,221,223,1,0,0,0,222,213,1,0,0,0,222,
        214,1,0,0,0,222,218,1,0,0,0,223,11,1,0,0,0,224,225,7,4,0,0,225,13,
        1,0,0,0,226,228,3,10,5,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,
        1,0,0,0,229,230,1,0,0,0,230,15,1,0,0,0,231,229,1,0,0,0,232,234,3,
        10,5,0,233,232,1,0,0,0,234,237,1,0,0,0,235,236,1,0,0,0,235,233,1,
        0,0,0,236,17,1,0,0,0,237,235,1,0,0,0,238,239,5,97,0,0,239,240,5,
        69,0,0,240,242,3,120,60,0,241,243,3,78,39,0,242,241,1,0,0,0,242,
        243,1,0,0,0,243,244,1,0,0,0,244,245,5,310,0,0,245,19,1,0,0,0,246,
        250,3,18,9,0,247,249,3,22,11,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
        248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,
        254,5,112,0,0,254,258,3,12,6,0,255,257,3,8,4,0,256,255,1,0,0,0,257,
        260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,21,1,0,0,0,260,258,
        1,0,0,0,261,262,3,60,30,0,262,263,5,310,0,0,263,267,1,0,0,0,264,
        267,3,8,4,0,265,267,3,30,15,0,266,261,1,0,0,0,266,264,1,0,0,0,266,
        265,1,0,0,0,267,23,1,0,0,0,268,270,3,110,55,0,269,271,3,76,38,0,
        270,269,1,0,0,0,270,271,1,0,0,0,271,25,1,0,0,0,272,277,3,24,12,0,
        273,274,5,30,0,0,274,276,3,24,12,0,275,273,1,0,0,0,276,279,1,0,0,
        0,277,275,1,0,0,0,277,278,1,0,0,0,278,27,1,0,0,0,279,277,1,0,0,0,
        280,282,5,257,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,
        0,283,284,5,224,0,0,284,290,3,108,54,0,285,287,5,16,0,0,286,288,
        3,26,13,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,
        5,17,0,0,290,285,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,
        3,76,38,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,
        5,310,0,0,296,29,1,0,0,0,297,298,3,28,14,0,298,307,3,14,7,0,299,
        300,5,116,0,0,300,304,3,12,6,0,301,303,3,8,4,0,302,301,1,0,0,0,303,
        306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,
        304,1,0,0,0,307,299,1,0,0,0,307,308,1,0,0,0,308,31,1,0,0,0,309,310,
        5,150,0,0,310,312,3,88,44,0,311,313,5,284,0,0,312,311,1,0,0,0,312,
        313,1,0,0,0,313,314,1,0,0,0,314,315,5,310,0,0,315,33,1,0,0,0,316,
        317,3,32,16,0,317,321,3,14,7,0,318,319,5,109,0,0,319,320,5,310,0,
        0,320,322,3,14,7,0,321,318,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,
        0,323,324,5,115,0,0,324,35,1,0,0,0,325,326,5,137,0,0,326,327,3,110,
        55,0,327,328,5,28,0,0,328,329,3,88,44,0,329,330,5,288,0,0,330,333,
        3,88,44,0,331,332,5,271,0,0,332,334,3,88,44,0,333,331,1,0,0,0,333,
        334,1,0,0,0,334,335,1,0,0,0,335,336,5,310,0,0,336,348,1,0,0,0,337,
        338,5,137,0,0,338,339,5,107,0,0,339,340,3,110,55,0,340,341,5,152,
        0,0,341,343,3,88,44,0,342,344,5,140,0,0,343,342,1,0,0,0,343,344,
        1,0,0,0,344,345,1,0,0,0,345,346,5,310,0,0,346,348,1,0,0,0,347,325,
        1,0,0,0,347,337,1,0,0,0,348,37,1,0,0,0,349,355,5,114,0,0,350,352,
        5,187,0,0,351,353,3,110,55,0,352,351,1,0,0,0,352,353,1,0,0,0,353,
        355,1,0,0,0,354,349,1,0,0,0,354,350,1,0,0,0,355,39,1,0,0,0,356,357,
        3,36,18,0,357,358,3,14,7,0,358,359,3,38,19,0,359,41,1,0,0,0,360,
        361,5,64,0,0,361,362,3,88,44,0,362,363,5,310,0,0,363,364,3,16,8,
        0,364,43,1,0,0,0,365,366,5,215,0,0,366,367,5,310,0,0,367,368,3,14,
        7,0,368,45,1,0,0,0,369,370,5,104,0,0,370,371,5,64,0,0,371,375,5,
        310,0,0,372,374,3,8,4,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,381,1,0,0,0,377,375,1,0,0,0,378,380,
        3,42,21,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,
        1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,384,386,3,44,22,0,385,384,
        1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,5,111,0,0,388,47,
        1,0,0,0,389,391,5,104,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,
        1,0,0,0,392,393,5,304,0,0,393,394,3,88,44,0,394,395,5,310,0,0,395,
        49,1,0,0,0,396,397,3,48,24,0,397,398,3,14,7,0,398,399,5,113,0,0,
        399,51,1,0,0,0,400,401,5,306,0,0,401,403,3,110,55,0,402,404,3,78,
        39,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,310,
        0,0,406,407,3,14,7,0,407,408,5,120,0,0,408,53,1,0,0,0,409,411,5,
        254,0,0,410,412,3,118,59,0,411,410,1,0,0,0,411,412,1,0,0,0,412,415,
        1,0,0,0,413,414,5,137,0,0,414,416,3,88,44,0,415,413,1,0,0,0,415,
        416,1,0,0,0,416,417,1,0,0,0,417,418,5,310,0,0,418,419,3,14,7,0,419,
        420,5,117,0,0,420,55,1,0,0,0,421,422,5,290,0,0,422,423,5,310,0,0,
        423,436,3,14,7,0,424,431,5,66,0,0,425,426,5,302,0,0,426,430,3,88,
        44,0,427,428,5,288,0,0,428,430,3,120,60,0,429,425,1,0,0,0,429,427,
        1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,
        1,0,0,0,433,431,1,0,0,0,434,435,5,310,0,0,435,437,3,14,7,0,436,424,
        1,0,0,0,436,437,1,0,0,0,437,441,1,0,0,0,438,439,5,134,0,0,439,440,
        5,310,0,0,440,442,3,14,7,0,441,438,1,0,0,0,441,442,1,0,0,0,442,443,
        1,0,0,0,443,444,5,119,0,0,444,57,1,0,0,0,445,453,3,50,25,0,446,453,
        3,34,17,0,447,453,3,46,23,0,448,453,3,40,20,0,449,453,3,52,26,0,
        450,453,3,54,27,0,451,453,3,56,28,0,452,445,1,0,0,0,452,446,1,0,
        0,0,452,447,1,0,0,0,452,448,1,0,0,0,452,449,1,0,0,0,452,450,1,0,
        0,0,452,451,1,0,0,0,453,59,1,0,0,0,454,455,5,40,0,0,455,456,5,206,
        0,0,456,457,3,120,60,0,457,472,3,76,38,0,458,459,5,306,0,0,459,460,
        3,110,55,0,460,461,5,28,0,0,461,469,3,88,44,0,462,463,5,30,0,0,463,
        464,3,110,55,0,464,465,5,28,0,0,465,466,3,88,44,0,466,468,1,0,0,
        0,467,462,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,
        0,470,473,1,0,0,0,471,469,1,0,0,0,472,458,1,0,0,0,472,473,1,0,0,
        0,473,1552,1,0,0,0,474,1552,5,226,0,0,475,476,5,6,0,0,476,490,3,
        82,41,0,477,480,5,71,0,0,478,479,5,288,0,0,479,481,3,82,41,0,480,
        478,1,0,0,0,480,481,1,0,0,0,481,491,1,0,0,0,482,483,5,253,0,0,483,
        487,3,88,44,0,484,485,5,274,0,0,485,487,3,88,44,0,486,482,1,0,0,
        0,486,484,1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,
        0,489,491,1,0,0,0,490,477,1,0,0,0,490,486,1,0,0,0,490,491,1,0,0,
        0,491,1552,1,0,0,0,492,523,5,104,0,0,493,496,5,139,0,0,494,497,5,
        33,0,0,495,497,3,104,52,0,496,494,1,0,0,0,496,495,1,0,0,0,497,510,
        1,0,0,0,498,499,5,184,0,0,499,501,3,120,60,0,500,502,5,165,0,0,501,
        500,1,0,0,0,501,502,1,0,0,0,502,509,1,0,0,0,503,504,5,306,0,0,504,
        509,3,82,41,0,505,506,5,288,0,0,506,509,3,120,60,0,507,509,5,198,
        0,0,508,498,1,0,0,0,508,503,1,0,0,0,508,505,1,0,0,0,508,507,1,0,
        0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,524,1,0,
        0,0,512,510,1,0,0,0,513,520,3,104,52,0,514,515,5,152,0,0,515,519,
        3,104,52,0,516,517,5,306,0,0,517,519,3,82,41,0,518,514,1,0,0,0,518,
        516,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,
        524,1,0,0,0,522,520,1,0,0,0,523,493,1,0,0,0,523,513,1,0,0,0,524,
        1552,1,0,0,0,525,526,5,272,0,0,526,527,3,88,44,0,527,528,5,288,0,
        0,528,533,3,110,55,0,529,530,5,30,0,0,530,532,3,110,55,0,531,529,
        1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,541,
        1,0,0,0,535,533,1,0,0,0,536,537,3,110,55,0,537,538,5,28,0,0,538,
        539,3,88,44,0,539,541,1,0,0,0,540,525,1,0,0,0,540,536,1,0,0,0,541,
        1552,1,0,0,0,542,544,7,5,0,0,543,545,7,6,0,0,544,543,1,0,0,0,544,
        545,1,0,0,0,545,550,1,0,0,0,546,550,5,101,0,0,547,550,5,95,0,0,548,
        550,5,218,0,0,549,542,1,0,0,0,549,546,1,0,0,0,549,547,1,0,0,0,549,
        548,1,0,0,0,550,551,1,0,0,0,551,556,3,74,37,0,552,553,5,30,0,0,553,
        555,3,74,37,0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
        557,1,0,0,0,557,563,1,0,0,0,558,556,1,0,0,0,559,560,5,129,0,0,560,
        561,5,224,0,0,561,563,3,104,52,0,562,549,1,0,0,0,562,559,1,0,0,0,
        563,1552,1,0,0,0,564,566,5,33,0,0,565,567,5,33,0,0,566,565,1,0,0,
        0,566,567,1,0,0,0,567,570,1,0,0,0,568,570,5,94,0,0,569,564,1,0,0,
        0,569,568,1,0,0,0,570,572,1,0,0,0,571,573,3,82,41,0,572,571,1,0,
        0,0,572,573,1,0,0,0,573,1552,1,0,0,0,574,593,5,301,0,0,575,576,5,
        288,0,0,576,592,3,88,44,0,577,583,5,305,0,0,578,579,5,54,0,0,579,
        580,3,88,44,0,580,581,5,30,0,0,581,582,3,88,44,0,582,584,1,0,0,0,
        583,578,1,0,0,0,583,584,1,0,0,0,584,592,1,0,0,0,585,592,5,203,0,
        0,586,592,5,71,0,0,587,592,5,188,0,0,588,589,5,286,0,0,589,592,3,
        88,44,0,590,592,3,88,44,0,591,575,1,0,0,0,591,577,1,0,0,0,591,585,
        1,0,0,0,591,586,1,0,0,0,591,587,1,0,0,0,591,588,1,0,0,0,591,590,
        1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,1552,
        1,0,0,0,595,593,1,0,0,0,596,600,5,121,0,0,597,598,5,98,0,0,598,600,
        5,131,0,0,599,596,1,0,0,0,599,597,1,0,0,0,600,603,1,0,0,0,601,604,
        3,104,52,0,602,604,5,33,0,0,603,601,1,0,0,0,603,602,1,0,0,0,604,
        606,1,0,0,0,605,607,5,232,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        1552,1,0,0,0,608,612,5,239,0,0,609,610,5,83,0,0,610,612,5,131,0,
        0,611,608,1,0,0,0,611,609,1,0,0,0,612,613,1,0,0,0,613,614,3,104,
        52,0,614,615,5,288,0,0,615,616,3,104,52,0,616,1552,1,0,0,0,617,618,
        7,7,0,0,618,1552,3,104,52,0,619,621,5,246,0,0,620,622,3,88,44,0,
        621,620,1,0,0,0,621,622,1,0,0,0,622,1552,1,0,0,0,623,657,5,209,0,
        0,624,625,5,217,0,0,625,629,3,104,52,0,626,627,5,55,0,0,627,629,
        5,2,0,0,628,624,1,0,0,0,628,626,1,0,0,0,629,630,1,0,0,0,630,631,
        5,207,0,0,631,635,3,104,52,0,632,633,5,39,0,0,633,634,7,8,0,0,634,
        636,3,104,52,0,635,632,1,0,0,0,635,636,1,0,0,0,636,658,1,0,0,0,637,
        644,5,159,0,0,638,639,5,161,0,0,639,642,3,120,60,0,640,641,5,8,0,
        0,641,643,3,120,60,0,642,640,1,0,0,0,642,643,1,0,0,0,643,645,1,0,
        0,0,644,638,1,0,0,0,644,645,1,0,0,0,645,653,1,0,0,0,646,647,5,261,
        0,0,647,648,5,55,0,0,648,649,5,2,0,0,649,650,5,207,0,0,650,653,3,
        104,52,0,651,653,3,120,60,0,652,637,1,0,0,0,652,646,1,0,0,0,652,
        651,1,0,0,0,653,655,1,0,0,0,654,656,3,60,30,0,655,654,1,0,0,0,655,
        656,1,0,0,0,656,658,1,0,0,0,657,628,1,0,0,0,657,652,1,0,0,0,658,
        1552,1,0,0,0,659,670,5,238,0,0,660,671,5,44,0,0,661,663,7,9,0,0,
        662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,671,3,82,41,
        0,665,666,5,221,0,0,666,668,3,82,41,0,667,669,5,128,0,0,668,667,
        1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,660,1,0,0,0,670,662,
        1,0,0,0,670,665,1,0,0,0,671,1552,1,0,0,0,672,673,5,262,0,0,673,1552,
        3,72,36,0,674,681,5,228,0,0,675,677,5,159,0,0,676,678,5,71,0,0,677,
        676,1,0,0,0,677,678,1,0,0,0,678,682,1,0,0,0,679,680,7,8,0,0,680,
        682,3,120,60,0,681,675,1,0,0,0,681,679,1,0,0,0,682,1552,1,0,0,0,
        683,699,5,220,0,0,684,686,5,159,0,0,685,687,5,44,0,0,686,685,1,0,
        0,0,686,687,1,0,0,0,687,700,1,0,0,0,688,694,5,177,0,0,689,693,3,
        120,60,0,690,691,5,288,0,0,691,693,5,171,0,0,692,689,1,0,0,0,692,
        690,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,
        700,1,0,0,0,696,694,1,0,0,0,697,698,5,221,0,0,698,700,3,120,60,0,
        699,684,1,0,0,0,699,688,1,0,0,0,699,697,1,0,0,0,700,1552,1,0,0,0,
        701,702,5,160,0,0,702,704,3,88,44,0,703,705,5,219,0,0,704,703,1,
        0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,708,5,71,0,0,707,706,1,
        0,0,0,707,708,1,0,0,0,708,1552,1,0,0,0,709,710,5,97,0,0,710,711,
        5,177,0,0,711,712,3,104,52,0,712,716,5,55,0,0,713,714,5,54,0,0,714,
        715,5,164,0,0,715,717,5,2,0,0,716,713,1,0,0,0,716,717,1,0,0,0,717,
        726,1,0,0,0,718,724,5,152,0,0,719,725,5,258,0,0,720,722,5,305,0,
        0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,3,104,
        52,0,724,719,1,0,0,0,724,721,1,0,0,0,725,727,1,0,0,0,726,718,1,0,
        0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,730,5,192,0,0,729,728,1,
        0,0,0,729,730,1,0,0,0,730,1552,1,0,0,0,731,732,5,97,0,0,732,733,
        5,217,0,0,733,734,3,104,52,0,734,735,5,207,0,0,735,736,3,104,52,
        0,736,737,5,227,0,0,737,742,3,88,44,0,738,739,5,54,0,0,739,740,5,
        2,0,0,740,741,5,30,0,0,741,743,5,2,0,0,742,738,1,0,0,0,742,743,1,
        0,0,0,743,748,1,0,0,0,744,745,5,56,0,0,745,749,3,120,60,0,746,747,
        5,42,0,0,747,749,3,120,60,0,748,744,1,0,0,0,748,746,1,0,0,0,748,
        749,1,0,0,0,749,756,1,0,0,0,750,751,5,186,0,0,751,754,3,120,60,0,
        752,753,5,30,0,0,753,755,3,120,60,0,754,752,1,0,0,0,754,755,1,0,
        0,0,755,757,1,0,0,0,756,750,1,0,0,0,756,757,1,0,0,0,757,772,1,0,
        0,0,758,759,5,136,0,0,759,770,3,120,60,0,760,761,5,30,0,0,761,768,
        5,2,0,0,762,763,5,30,0,0,763,766,3,88,44,0,764,765,5,30,0,0,765,
        767,3,120,60,0,766,764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,
        762,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,760,1,0,0,0,770,
        771,1,0,0,0,771,773,1,0,0,0,772,758,1,0,0,0,772,773,1,0,0,0,773,
        776,1,0,0,0,774,775,5,274,0,0,775,777,3,120,60,0,776,774,1,0,0,0,
        776,777,1,0,0,0,777,780,1,0,0,0,778,779,5,179,0,0,779,781,3,88,44,
        0,780,778,1,0,0,0,780,781,1,0,0,0,781,792,1,0,0,0,782,783,5,159,
        0,0,783,786,3,120,60,0,784,785,5,8,0,0,785,787,3,120,60,0,786,784,
        1,0,0,0,786,787,1,0,0,0,787,790,1,0,0,0,788,789,5,30,0,0,789,791,
        3,88,44,0,790,788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,782,
        1,0,0,0,792,793,1,0,0,0,793,796,1,0,0,0,794,795,5,170,0,0,795,797,
        3,120,60,0,796,794,1,0,0,0,796,797,1,0,0,0,797,803,1,0,0,0,798,801,
        5,268,0,0,799,800,5,137,0,0,800,802,3,88,44,0,801,799,1,0,0,0,801,
        802,1,0,0,0,802,804,1,0,0,0,803,798,1,0,0,0,803,804,1,0,0,0,804,
        808,1,0,0,0,805,806,5,75,0,0,806,807,5,256,0,0,807,809,5,2,0,0,808,
        805,1,0,0,0,808,809,1,0,0,0,809,1552,1,0,0,0,810,811,5,97,0,0,811,
        812,5,221,0,0,812,814,3,104,52,0,813,815,5,263,0,0,814,813,1,0,0,
        0,814,815,1,0,0,0,815,817,1,0,0,0,816,818,5,169,0,0,817,816,1,0,
        0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,821,5,237,0,0,820,819,1,
        0,0,0,820,821,1,0,0,0,821,825,1,0,0,0,822,823,5,75,0,0,823,824,5,
        256,0,0,824,826,5,2,0,0,825,822,1,0,0,0,825,826,1,0,0,0,826,1552,
        1,0,0,0,827,828,5,97,0,0,828,829,5,55,0,0,829,830,5,2,0,0,830,831,
        5,207,0,0,831,832,3,104,52,0,832,833,5,227,0,0,833,836,3,88,44,0,
        834,835,5,179,0,0,835,837,3,88,44,0,836,834,1,0,0,0,836,837,1,0,
        0,0,837,1552,1,0,0,0,838,839,5,39,0,0,839,842,5,305,0,0,840,843,
        3,26,13,0,841,843,5,44,0,0,842,840,1,0,0,0,842,841,1,0,0,0,843,852,
        1,0,0,0,844,850,5,152,0,0,845,847,5,305,0,0,846,845,1,0,0,0,846,
        847,1,0,0,0,847,848,1,0,0,0,848,851,3,120,60,0,849,851,5,258,0,0,
        850,846,1,0,0,0,850,849,1,0,0,0,851,853,1,0,0,0,852,844,1,0,0,0,
        852,853,1,0,0,0,853,855,1,0,0,0,854,856,7,10,0,0,855,854,1,0,0,0,
        855,856,1,0,0,0,856,858,1,0,0,0,857,859,5,198,0,0,858,857,1,0,0,
        0,858,859,1,0,0,0,859,1552,1,0,0,0,860,861,5,39,0,0,861,1552,5,258,
        0,0,862,863,5,39,0,0,863,864,5,177,0,0,864,866,3,104,52,0,865,867,
        5,203,0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,870,1,0,0,0,868,869,
        5,217,0,0,869,871,3,104,52,0,870,868,1,0,0,0,870,871,1,0,0,0,871,
        1552,1,0,0,0,872,873,5,39,0,0,873,874,5,221,0,0,874,1552,3,120,60,
        0,875,876,5,92,0,0,876,879,7,8,0,0,877,880,5,44,0,0,878,880,3,26,
        13,0,879,877,1,0,0,0,879,878,1,0,0,0,880,1552,1,0,0,0,881,882,5,
        182,0,0,882,885,5,305,0,0,883,886,5,258,0,0,884,886,3,120,60,0,885,
        883,1,0,0,0,885,884,1,0,0,0,886,917,1,0,0,0,887,888,5,143,0,0,888,
        889,3,82,41,0,889,890,5,288,0,0,890,891,3,82,41,0,891,916,1,0,0,
        0,892,893,5,54,0,0,893,894,3,82,41,0,894,895,5,267,0,0,895,896,3,
        82,41,0,896,916,1,0,0,0,897,898,5,136,0,0,898,916,3,82,41,0,899,
        900,5,274,0,0,900,916,3,88,44,0,901,902,5,287,0,0,902,916,3,88,44,
        0,903,916,3,120,60,0,904,905,5,149,0,0,905,906,5,131,0,0,906,916,
        3,104,52,0,907,908,5,132,0,0,908,909,5,131,0,0,909,916,3,104,52,
        0,910,911,5,75,0,0,911,912,5,256,0,0,912,916,3,88,44,0,913,914,5,
        75,0,0,914,916,3,82,41,0,915,887,1,0,0,0,915,892,1,0,0,0,915,897,
        1,0,0,0,915,899,1,0,0,0,915,901,1,0,0,0,915,903,1,0,0,0,915,904,
        1,0,0,0,915,907,1,0,0,0,915,910,1,0,0,0,915,913,1,0,0,0,916,919,
        1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,1552,1,0,0,0,919,917,
        1,0,0,0,920,921,5,182,0,0,921,924,7,11,0,0,922,925,5,33,0,0,923,
        925,3,104,52,0,924,922,1,0,0,0,924,923,1,0,0,0,925,937,1,0,0,0,926,
        930,5,152,0,0,927,928,5,305,0,0,928,931,3,120,60,0,929,931,5,258,
        0,0,930,927,1,0,0,0,930,929,1,0,0,0,931,936,1,0,0,0,932,933,5,50,
        0,0,933,936,3,88,44,0,934,936,3,120,60,0,935,926,1,0,0,0,935,932,
        1,0,0,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,
        1,0,0,0,938,1552,1,0,0,0,939,937,1,0,0,0,940,942,5,122,0,0,941,943,
        3,88,44,0,942,941,1,0,0,0,942,943,1,0,0,0,943,1552,1,0,0,0,944,946,
        5,285,0,0,945,947,3,88,44,0,946,945,1,0,0,0,946,947,1,0,0,0,947,
        1552,1,0,0,0,948,949,5,85,0,0,949,950,7,12,0,0,950,968,3,104,52,
        0,951,953,5,142,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,
        0,0,954,955,5,16,0,0,955,960,3,70,35,0,956,957,5,30,0,0,957,959,
        3,70,35,0,958,956,1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,0,960,961,
        1,0,0,0,961,963,1,0,0,0,962,960,1,0,0,0,963,964,5,17,0,0,964,969,
        1,0,0,0,965,966,5,143,0,0,966,967,5,49,0,0,967,969,3,88,44,0,968,
        952,1,0,0,0,968,965,1,0,0,0,969,1552,1,0,0,0,970,971,5,45,0,0,971,
        972,5,278,0,0,972,988,3,104,52,0,973,974,5,40,0,0,974,975,5,76,0,
        0,975,987,3,70,35,0,976,977,5,106,0,0,977,978,5,76,0,0,978,987,3,
        120,60,0,979,980,5,45,0,0,980,981,5,76,0,0,981,984,3,120,60,0,982,
        983,5,199,0,0,983,985,5,204,0,0,984,982,1,0,0,0,984,985,1,0,0,0,
        985,987,1,0,0,0,986,973,1,0,0,0,986,976,1,0,0,0,986,979,1,0,0,0,
        987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,1552,1,0,0,0,
        990,988,1,0,0,0,991,1018,5,260,0,0,992,1019,3,104,52,0,993,995,5,
        102,0,0,994,993,1,0,0,0,994,995,1,0,0,0,995,998,1,0,0,0,996,999,
        3,84,42,0,997,999,5,7,0,0,998,996,1,0,0,0,998,997,1,0,0,0,999,1002,
        1,0,0,0,1000,1001,5,143,0,0,1001,1003,3,104,52,0,1002,1000,1,0,0,
        0,1002,1003,1,0,0,0,1003,1006,1,0,0,0,1004,1005,5,303,0,0,1005,1007,
        3,88,44,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1011,1,0,0,0,
        1008,1009,5,157,0,0,1009,1010,7,13,0,0,1010,1012,3,104,52,0,1011,
        1008,1,0,0,0,1011,1012,1,0,0,0,1012,1016,1,0,0,0,1013,1014,5,211,
        0,0,1014,1015,5,62,0,0,1015,1017,3,120,60,0,1016,1013,1,0,0,0,1016,
        1017,1,0,0,0,1017,1019,1,0,0,0,1018,992,1,0,0,0,1018,994,1,0,0,0,
        1019,1552,1,0,0,0,1020,1036,5,298,0,0,1021,1022,5,152,0,0,1022,1035,
        3,104,52,0,1023,1025,5,211,0,0,1024,1026,5,280,0,0,1025,1024,1,0,
        0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1035,3,88,44,0,1028,
        1029,5,43,0,0,1029,1035,3,104,52,0,1030,1035,5,264,0,0,1031,1035,
        5,127,0,0,1032,1035,5,202,0,0,1033,1035,3,104,52,0,1034,1021,1,0,
        0,0,1034,1023,1,0,0,0,1034,1028,1,0,0,0,1034,1030,1,0,0,0,1034,1031,
        1,0,0,0,1034,1032,1,0,0,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,
        1034,1,0,0,0,1036,1037,1,0,0,0,1037,1552,1,0,0,0,1038,1036,1,0,0,
        0,1039,1043,5,167,0,0,1040,1042,3,62,31,0,1041,1040,1,0,0,0,1042,
        1045,1,0,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1552,1,0,0,
        0,1045,1043,1,0,0,0,1046,1552,5,82,0,0,1047,1552,5,245,0,0,1048,
        1056,5,240,0,0,1049,1055,3,62,31,0,1050,1051,3,104,52,0,1051,1052,
        5,306,0,0,1052,1053,3,88,44,0,1053,1055,1,0,0,0,1054,1049,1,0,0,
        0,1054,1050,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,
        1,0,0,0,1057,1552,1,0,0,0,1058,1056,1,0,0,0,1059,1060,5,154,0,0,
        1060,1061,5,209,0,0,1061,1062,3,104,52,0,1062,1063,7,14,0,0,1063,
        1065,3,104,52,0,1064,1066,5,78,0,0,1065,1064,1,0,0,0,1065,1066,1,
        0,0,0,1066,1068,1,0,0,0,1067,1069,7,15,0,0,1068,1067,1,0,0,0,1068,
        1069,1,0,0,0,1069,1071,1,0,0,0,1070,1072,7,16,0,0,1071,1070,1,0,
        0,0,1071,1072,1,0,0,0,1072,1074,1,0,0,0,1073,1075,5,41,0,0,1074,
        1073,1,0,0,0,1074,1075,1,0,0,0,1075,1552,1,0,0,0,1076,1082,5,84,
        0,0,1077,1078,5,288,0,0,1078,1081,3,88,44,0,1079,1081,3,62,31,0,
        1080,1077,1,0,0,0,1080,1079,1,0,0,0,1081,1084,1,0,0,0,1082,1080,
        1,0,0,0,1082,1083,1,0,0,0,1083,1552,1,0,0,0,1084,1082,1,0,0,0,1085,
        1092,5,275,0,0,1086,1087,5,288,0,0,1087,1091,3,88,44,0,1088,1091,
        3,62,31,0,1089,1091,3,88,44,0,1090,1086,1,0,0,0,1090,1088,1,0,0,
        0,1090,1089,1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,
        1,0,0,0,1093,1552,1,0,0,0,1094,1092,1,0,0,0,1095,1096,5,269,0,0,
        1096,1097,5,288,0,0,1097,1098,3,88,44,0,1098,1099,5,209,0,0,1099,
        1104,3,88,44,0,1100,1101,5,10,0,0,1101,1103,3,120,60,0,1102,1100,
        1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,
        1118,1,0,0,0,1106,1104,1,0,0,0,1107,1108,5,30,0,0,1108,1113,3,88,
        44,0,1109,1110,5,10,0,0,1110,1112,3,120,60,0,1111,1109,1,0,0,0,1112,
        1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,1117,1,0,0,
        0,1115,1113,1,0,0,0,1116,1107,1,0,0,0,1117,1120,1,0,0,0,1118,1116,
        1,0,0,0,1118,1119,1,0,0,0,1119,1131,1,0,0,0,1120,1118,1,0,0,0,1121,
        1130,5,51,0,0,1122,1130,5,100,0,0,1123,1125,5,130,0,0,1124,1126,
        7,17,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,
        1130,3,82,41,0,1128,1130,3,62,31,0,1129,1121,1,0,0,0,1129,1122,1,
        0,0,0,1129,1123,1,0,0,0,1129,1128,1,0,0,0,1130,1133,1,0,0,0,1131,
        1129,1,0,0,0,1131,1132,1,0,0,0,1132,1552,1,0,0,0,1133,1131,1,0,0,
        0,1134,1140,7,18,0,0,1135,1139,3,62,31,0,1136,1137,5,152,0,0,1137,
        1139,3,104,52,0,1138,1135,1,0,0,0,1138,1136,1,0,0,0,1139,1142,1,
        0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1552,1,0,0,0,1142,
        1140,1,0,0,0,1143,1144,5,48,0,0,1144,1152,5,143,0,0,1145,1146,5,
        49,0,0,1146,1153,3,88,44,0,1147,1148,3,104,52,0,1148,1149,5,137,
        0,0,1149,1150,3,88,44,0,1150,1153,1,0,0,0,1151,1153,3,104,52,0,1152,
        1145,1,0,0,0,1152,1147,1,0,0,0,1152,1151,1,0,0,0,1153,1156,1,0,0,
        0,1154,1155,5,291,0,0,1155,1157,3,104,52,0,1156,1154,1,0,0,0,1156,
        1157,1,0,0,0,1157,1552,1,0,0,0,1158,1160,5,48,0,0,1159,1161,5,58,
        0,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1168,1,0,0,0,1162,1163,
        5,152,0,0,1163,1164,3,104,52,0,1164,1165,5,193,0,0,1165,1169,1,0,
        0,0,1166,1167,5,152,0,0,1167,1169,3,104,52,0,1168,1162,1,0,0,0,1168,
        1166,1,0,0,0,1168,1169,1,0,0,0,1169,1552,1,0,0,0,1170,1171,5,156,
        0,0,1171,1172,5,157,0,0,1172,1192,3,104,52,0,1173,1179,5,143,0,0,
        1174,1175,5,49,0,0,1175,1180,3,88,44,0,1176,1180,5,176,0,0,1177,
        1178,5,184,0,0,1178,1180,3,88,44,0,1179,1174,1,0,0,0,1179,1176,1,
        0,0,0,1179,1177,1,0,0,0,1180,1193,1,0,0,0,1181,1182,5,16,0,0,1182,
        1183,3,84,42,0,1183,1184,5,17,0,0,1184,1186,1,0,0,0,1185,1181,1,
        0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,5,300,0,0,1188,
        1189,5,16,0,0,1189,1190,3,82,41,0,1190,1191,5,17,0,0,1191,1193,1,
        0,0,0,1192,1173,1,0,0,0,1192,1185,1,0,0,0,1193,1552,1,0,0,0,1194,
        1196,5,268,0,0,1195,1197,3,88,44,0,1196,1195,1,0,0,0,1196,1197,1,
        0,0,0,1197,1200,1,0,0,0,1198,1199,5,152,0,0,1199,1201,3,104,52,0,
        1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,1552,1,0,0,0,1202,1216,
        5,216,0,0,1203,1217,5,87,0,0,1204,1206,7,19,0,0,1205,1204,1,0,0,
        0,1205,1206,1,0,0,0,1206,1214,1,0,0,0,1207,1208,5,152,0,0,1208,1215,
        3,104,52,0,1209,1210,3,104,52,0,1210,1211,5,152,0,0,1211,1212,3,
        104,52,0,1212,1215,1,0,0,0,1213,1215,3,104,52,0,1214,1207,1,0,0,
        0,1214,1209,1,0,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,
        1,0,0,0,1216,1203,1,0,0,0,1216,1205,1,0,0,0,1217,1552,1,0,0,0,1218,
        1220,5,235,0,0,1219,1221,5,78,0,0,1220,1219,1,0,0,0,1220,1221,1,
        0,0,0,1221,1552,1,0,0,0,1222,1223,5,259,0,0,1223,1238,3,88,44,0,
        1224,1225,5,211,0,0,1225,1234,3,88,44,0,1226,1227,5,280,0,0,1227,
        1230,3,104,52,0,1228,1229,5,207,0,0,1229,1231,3,104,52,0,1230,1228,
        1,0,0,0,1230,1231,1,0,0,0,1231,1234,1,0,0,0,1232,1234,3,104,52,0,
        1233,1224,1,0,0,0,1233,1226,1,0,0,0,1233,1232,1,0,0,0,1234,1236,
        1,0,0,0,1235,1237,7,15,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,
        1239,1,0,0,0,1238,1233,1,0,0,0,1238,1239,1,0,0,0,1239,1242,1,0,0,
        0,1240,1241,5,152,0,0,1241,1243,3,104,52,0,1242,1240,1,0,0,0,1242,
        1243,1,0,0,0,1243,1552,1,0,0,0,1244,1245,5,297,0,0,1245,1246,3,104,
        52,0,1246,1247,5,262,0,0,1247,1248,3,120,60,0,1248,1249,5,28,0,0,
        1249,1257,3,88,44,0,1250,1251,5,30,0,0,1251,1252,3,120,60,0,1252,
        1253,5,28,0,0,1253,1254,3,88,44,0,1254,1256,1,0,0,0,1255,1250,1,
        0,0,0,1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,
        1271,1,0,0,0,1259,1257,1,0,0,0,1260,1262,5,143,0,0,1261,1263,5,138,
        0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1270,
        3,84,42,0,1265,1266,5,158,0,0,1266,1270,3,84,42,0,1267,1268,5,303,
        0,0,1268,1270,3,88,44,0,1269,1260,1,0,0,0,1269,1265,1,0,0,0,1269,
        1267,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,0,1271,1272,1,0,0,
        0,1272,1552,1,0,0,0,1273,1271,1,0,0,0,1274,1281,5,146,0,0,1275,1282,
        5,289,0,0,1276,1282,5,60,0,0,1277,1279,5,231,0,0,1278,1277,1,0,0,
        0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1282,3,88,44,0,1281,1275,
        1,0,0,0,1281,1276,1,0,0,0,1281,1278,1,0,0,0,1282,1285,1,0,0,0,1283,
        1284,5,152,0,0,1284,1286,3,104,52,0,1285,1283,1,0,0,0,1285,1286,
        1,0,0,0,1286,1552,1,0,0,0,1287,1299,5,83,0,0,1288,1289,5,288,0,0,
        1289,1290,5,49,0,0,1290,1298,3,104,52,0,1291,1293,5,130,0,0,1292,
        1294,7,17,0,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,
        0,0,1295,1298,3,82,41,0,1296,1298,3,62,31,0,1297,1288,1,0,0,0,1297,
        1291,1,0,0,0,1297,1296,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,
        0,1299,1300,1,0,0,0,1300,1552,1,0,0,0,1301,1299,1,0,0,0,1302,1304,
        5,83,0,0,1303,1305,5,273,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,
        1305,1306,1,0,0,0,1306,1307,5,288,0,0,1307,1552,3,104,52,0,1308,
        1311,5,307,0,0,1309,1310,5,152,0,0,1310,1312,3,104,52,0,1311,1309,
        1,0,0,0,1311,1312,1,0,0,0,1312,1552,1,0,0,0,1313,1317,5,61,0,0,1314,
        1316,8,0,0,0,1315,1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,
        0,1317,1318,1,0,0,0,1318,1552,1,0,0,0,1319,1317,1,0,0,0,1320,1338,
        5,255,0,0,1321,1323,5,130,0,0,1322,1324,7,17,0,0,1323,1322,1,0,0,
        0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1337,3,82,41,0,1326,1337,
        5,173,0,0,1327,1337,5,58,0,0,1328,1337,5,176,0,0,1329,1330,5,184,
        0,0,1330,1332,3,88,44,0,1331,1333,5,41,0,0,1332,1331,1,0,0,0,1332,
        1333,1,0,0,0,1333,1337,1,0,0,0,1334,1335,5,288,0,0,1335,1337,3,88,
        44,0,1336,1321,1,0,0,0,1336,1326,1,0,0,0,1336,1327,1,0,0,0,1336,
        1328,1,0,0,0,1336,1329,1,0,0,0,1336,1334,1,0,0,0,1337,1340,1,0,0,
        0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,1552,1,0,0,0,1340,1338,
        1,0,0,0,1341,1355,5,144,0,0,1342,1344,5,130,0,0,1343,1345,7,17,0,
        0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1354,
        3,82,41,0,1347,1354,5,173,0,0,1348,1354,5,176,0,0,1349,1350,5,184,
        0,0,1350,1354,3,88,44,0,1351,1352,5,143,0,0,1352,1354,3,88,44,0,
        1353,1342,1,0,0,0,1353,1347,1,0,0,0,1353,1348,1,0,0,0,1353,1349,
        1,0,0,0,1353,1351,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,0,1355,
        1356,1,0,0,0,1356,1552,1,0,0,0,1357,1355,1,0,0,0,1358,1364,5,73,
        0,0,1359,1361,7,20,0,0,1360,1362,5,44,0,0,1361,1360,1,0,0,0,1361,
        1362,1,0,0,0,1362,1365,1,0,0,0,1363,1365,5,44,0,0,1364,1359,1,0,
        0,0,1364,1363,1,0,0,0,1365,1552,1,0,0,0,1366,1368,5,229,0,0,1367,
        1369,5,124,0,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1375,1,0,
        0,0,1370,1372,5,105,0,0,1371,1373,5,138,0,0,1372,1371,1,0,0,0,1372,
        1373,1,0,0,0,1373,1375,1,0,0,0,1374,1366,1,0,0,0,1374,1370,1,0,0,
        0,1375,1552,1,0,0,0,1376,1377,5,296,0,0,1377,1552,5,44,0,0,1378,
        1405,5,71,0,0,1379,1406,5,44,0,0,1380,1381,5,69,0,0,1381,1406,3,
        88,44,0,1382,1383,5,70,0,0,1383,1406,3,104,52,0,1384,1406,5,93,0,
        0,1385,1386,5,103,0,0,1386,1406,3,84,42,0,1387,1406,5,124,0,0,1388,
        1406,5,122,0,0,1389,1406,5,130,0,0,1390,1406,5,145,0,0,1391,1406,
        5,168,0,0,1392,1406,5,174,0,0,1393,1406,5,178,0,0,1394,1406,5,221,
        0,0,1395,1406,5,225,0,0,1396,1406,5,227,0,0,1397,1399,5,229,0,0,
        1398,1400,5,44,0,0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1406,
        1,0,0,0,1401,1402,5,242,0,0,1402,1406,3,88,44,0,1403,1406,5,292,
        0,0,1404,1406,5,305,0,0,1405,1379,1,0,0,0,1405,1380,1,0,0,0,1405,
        1382,1,0,0,0,1405,1384,1,0,0,0,1405,1385,1,0,0,0,1405,1387,1,0,0,
        0,1405,1388,1,0,0,0,1405,1389,1,0,0,0,1405,1390,1,0,0,0,1405,1391,
        1,0,0,0,1405,1392,1,0,0,0,1405,1393,1,0,0,0,1405,1394,1,0,0,0,1405,
        1395,1,0,0,0,1405,1396,1,0,0,0,1405,1397,1,0,0,0,1405,1401,1,0,0,
        0,1405,1403,1,0,0,0,1405,1404,1,0,0,0,1405,1406,1,0,0,0,1406,1552,
        1,0,0,0,1407,1408,5,241,0,0,1408,1411,5,139,0,0,1409,1412,5,33,0,
        0,1410,1412,3,104,52,0,1411,1409,1,0,0,0,1411,1410,1,0,0,0,1412,
        1422,1,0,0,0,1413,1421,5,191,0,0,1414,1415,5,288,0,0,1415,1417,5,
        223,0,0,1416,1418,5,227,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,
        1418,1421,1,0,0,0,1419,1421,5,189,0,0,1420,1413,1,0,0,0,1420,1414,
        1,0,0,0,1420,1419,1,0,0,0,1421,1424,1,0,0,0,1422,1420,1,0,0,0,1422,
        1423,1,0,0,0,1423,1552,1,0,0,0,1424,1422,1,0,0,0,1425,1427,5,95,
        0,0,1426,1428,3,116,58,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,
        1429,1,0,0,0,1429,1430,3,120,60,0,1430,1431,5,152,0,0,1431,1434,
        3,104,52,0,1432,1433,5,50,0,0,1433,1435,3,120,60,0,1434,1432,1,0,
        0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,0,1436,1438,3,66,33,0,1437,
        1436,1,0,0,0,1437,1438,1,0,0,0,1438,1552,1,0,0,0,1439,1442,7,21,
        0,0,1440,1441,5,10,0,0,1441,1443,3,120,60,0,1442,1440,1,0,0,0,1442,
        1443,1,0,0,0,1443,1447,1,0,0,0,1444,1446,8,0,0,0,1445,1444,1,0,0,
        0,1446,1449,1,0,0,0,1447,1445,1,0,0,0,1447,1448,1,0,0,0,1448,1552,
        1,0,0,0,1449,1447,1,0,0,0,1450,1451,5,52,0,0,1451,1454,3,88,44,0,
        1452,1453,5,179,0,0,1453,1455,3,88,44,0,1454,1452,1,0,0,0,1454,1455,
        1,0,0,0,1455,1552,1,0,0,0,1456,1458,5,80,0,0,1457,1459,7,22,0,0,
        1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1468,1,0,0,0,1460,1467,
        5,44,0,0,1461,1467,5,110,0,0,1462,1467,5,190,0,0,1463,1464,5,50,
        0,0,1464,1467,3,104,52,0,1465,1467,3,104,52,0,1466,1460,1,0,0,0,
        1466,1461,1,0,0,0,1466,1462,1,0,0,0,1466,1463,1,0,0,0,1466,1465,
        1,0,0,0,1467,1470,1,0,0,0,1468,1466,1,0,0,0,1468,1469,1,0,0,0,1469,
        1552,1,0,0,0,1470,1468,1,0,0,0,1471,1472,5,166,0,0,1472,1552,3,118,
        59,0,1473,1474,5,252,0,0,1474,1478,5,288,0,0,1475,1476,5,173,0,0,
        1476,1479,3,104,52,0,1477,1479,3,104,52,0,1478,1475,1,0,0,0,1478,
        1477,1,0,0,0,1479,1483,1,0,0,0,1480,1481,5,44,0,0,1481,1482,7,17,
        0,0,1482,1484,3,104,52,0,1483,1480,1,0,0,0,1483,1484,1,0,0,0,1484,
        1552,1,0,0,0,1485,1486,5,244,0,0,1486,1487,5,143,0,0,1487,1489,3,
        104,52,0,1488,1490,5,41,0,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,
        1490,1552,1,0,0,0,1491,1492,5,308,0,0,1492,1493,5,305,0,0,1493,1494,
        3,104,52,0,1494,1518,7,23,0,0,1495,1496,5,54,0,0,1496,1497,3,88,
        44,0,1497,1498,5,30,0,0,1498,1499,3,88,44,0,1499,1519,1,0,0,0,1500,
        1501,5,143,0,0,1501,1502,5,54,0,0,1502,1503,3,88,44,0,1503,1504,
        5,30,0,0,1504,1516,3,88,44,0,1505,1506,5,267,0,0,1506,1507,5,54,
        0,0,1507,1508,3,88,44,0,1508,1509,5,30,0,0,1509,1510,3,88,44,0,1510,
        1517,1,0,0,0,1511,1512,5,288,0,0,1512,1513,3,88,44,0,1513,1514,5,
        30,0,0,1514,1515,3,88,44,0,1515,1517,1,0,0,0,1516,1505,1,0,0,0,1516,
        1511,1,0,0,0,1516,1517,1,0,0,0,1517,1519,1,0,0,0,1518,1495,1,0,0,
        0,1518,1500,1,0,0,0,1518,1519,1,0,0,0,1519,1552,1,0,0,0,1520,1532,
        5,282,0,0,1521,1522,5,288,0,0,1522,1531,3,110,55,0,1523,1531,5,41,
        0,0,1524,1531,5,283,0,0,1525,1531,5,198,0,0,1526,1527,5,135,0,0,
        1527,1531,3,88,44,0,1528,1529,5,222,0,0,1529,1531,3,88,44,0,1530,
        1521,1,0,0,0,1530,1523,1,0,0,0,1530,1524,1,0,0,0,1530,1525,1,0,0,
        0,1530,1526,1,0,0,0,1530,1528,1,0,0,0,1531,1534,1,0,0,0,1532,1530,
        1,0,0,0,1532,1533,1,0,0,0,1533,1535,1,0,0,0,1534,1532,1,0,0,0,1535,
        1536,5,310,0,0,1536,1537,3,64,32,0,1537,1538,5,118,0,0,1538,1552,
        1,0,0,0,1539,1540,5,265,0,0,1540,1552,5,145,0,0,1541,1542,5,148,
        0,0,1542,1546,5,305,0,0,1543,1547,5,44,0,0,1544,1547,5,258,0,0,1545,
        1547,3,82,41,0,1546,1543,1,0,0,0,1546,1544,1,0,0,0,1546,1545,1,0,
        0,0,1547,1552,1,0,0,0,1548,1549,5,28,0,0,1549,1552,3,88,44,0,1550,
        1552,3,94,47,0,1551,454,1,0,0,0,1551,474,1,0,0,0,1551,475,1,0,0,
        0,1551,492,1,0,0,0,1551,540,1,0,0,0,1551,562,1,0,0,0,1551,569,1,
        0,0,0,1551,574,1,0,0,0,1551,599,1,0,0,0,1551,611,1,0,0,0,1551,617,
        1,0,0,0,1551,619,1,0,0,0,1551,623,1,0,0,0,1551,659,1,0,0,0,1551,
        672,1,0,0,0,1551,674,1,0,0,0,1551,683,1,0,0,0,1551,701,1,0,0,0,1551,
        709,1,0,0,0,1551,731,1,0,0,0,1551,810,1,0,0,0,1551,827,1,0,0,0,1551,
        838,1,0,0,0,1551,860,1,0,0,0,1551,862,1,0,0,0,1551,872,1,0,0,0,1551,
        875,1,0,0,0,1551,881,1,0,0,0,1551,920,1,0,0,0,1551,940,1,0,0,0,1551,
        944,1,0,0,0,1551,948,1,0,0,0,1551,970,1,0,0,0,1551,991,1,0,0,0,1551,
        1020,1,0,0,0,1551,1039,1,0,0,0,1551,1046,1,0,0,0,1551,1047,1,0,0,
        0,1551,1048,1,0,0,0,1551,1059,1,0,0,0,1551,1076,1,0,0,0,1551,1085,
        1,0,0,0,1551,1095,1,0,0,0,1551,1134,1,0,0,0,1551,1143,1,0,0,0,1551,
        1158,1,0,0,0,1551,1170,1,0,0,0,1551,1194,1,0,0,0,1551,1202,1,0,0,
        0,1551,1218,1,0,0,0,1551,1222,1,0,0,0,1551,1244,1,0,0,0,1551,1274,
        1,0,0,0,1551,1287,1,0,0,0,1551,1302,1,0,0,0,1551,1308,1,0,0,0,1551,
        1313,1,0,0,0,1551,1320,1,0,0,0,1551,1341,1,0,0,0,1551,1358,1,0,0,
        0,1551,1374,1,0,0,0,1551,1376,1,0,0,0,1551,1378,1,0,0,0,1551,1407,
        1,0,0,0,1551,1425,1,0,0,0,1551,1439,1,0,0,0,1551,1450,1,0,0,0,1551,
        1456,1,0,0,0,1551,1471,1,0,0,0,1551,1473,1,0,0,0,1551,1485,1,0,0,
        0,1551,1491,1,0,0,0,1551,1520,1,0,0,0,1551,1539,1,0,0,0,1551,1541,
        1,0,0,0,1551,1548,1,0,0,0,1551,1550,1,0,0,0,1552,61,1,0,0,0,1553,
        1560,3,118,59,0,1554,1555,5,137,0,0,1555,1560,3,88,44,0,1556,1557,
        5,304,0,0,1557,1560,3,88,44,0,1558,1560,5,194,0,0,1559,1553,1,0,
        0,0,1559,1554,1,0,0,0,1559,1556,1,0,0,0,1559,1558,1,0,0,0,1560,63,
        1,0,0,0,1561,1563,8,24,0,0,1562,1561,1,0,0,0,1563,1566,1,0,0,0,1564,
        1562,1,0,0,0,1564,1565,1,0,0,0,1565,65,1,0,0,0,1566,1564,1,0,0,0,
        1567,1572,3,68,34,0,1568,1569,5,30,0,0,1569,1571,3,68,34,0,1570,
        1568,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,
        0,1573,67,1,0,0,0,1574,1572,1,0,0,0,1575,1577,3,116,58,0,1576,1578,
        5,6,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1580,1,0,0,0,1579,
        1581,3,120,60,0,1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,69,1,0,
        0,0,1582,1583,3,120,60,0,1583,1585,3,120,60,0,1584,1586,3,114,57,
        0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,71,1,0,0,0,1587,1595,
        5,46,0,0,1588,1596,5,209,0,0,1589,1596,5,208,0,0,1590,1591,5,288,
        0,0,1591,1593,3,104,52,0,1592,1594,5,41,0,0,1593,1592,1,0,0,0,1593,
        1594,1,0,0,0,1594,1596,1,0,0,0,1595,1588,1,0,0,0,1595,1589,1,0,0,
        0,1595,1590,1,0,0,0,1596,1829,1,0,0,0,1597,1598,7,25,0,0,1598,1829,
        7,26,0,0,1599,1604,5,57,0,0,1600,1605,5,209,0,0,1601,1605,5,208,
        0,0,1602,1603,5,288,0,0,1603,1605,3,104,52,0,1604,1600,1,0,0,0,1604,
        1601,1,0,0,0,1604,1602,1,0,0,0,1605,1829,1,0,0,0,1606,1617,5,67,
        0,0,1607,1618,5,209,0,0,1608,1618,5,208,0,0,1609,1615,5,288,0,0,
        1610,1613,3,88,44,0,1611,1612,5,248,0,0,1612,1614,3,88,44,0,1613,
        1611,1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,1615,1610,1,0,0,
        0,1615,1616,1,0,0,0,1616,1618,1,0,0,0,1617,1607,1,0,0,0,1617,1608,
        1,0,0,0,1617,1609,1,0,0,0,1618,1829,1,0,0,0,1619,1620,5,70,0,0,1620,
        1621,5,288,0,0,1621,1624,3,104,52,0,1622,1623,5,152,0,0,1623,1625,
        3,104,52,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1628,1,0,0,0,
        1626,1627,5,43,0,0,1627,1629,3,104,52,0,1628,1626,1,0,0,0,1628,1629,
        1,0,0,0,1629,1631,1,0,0,0,1630,1632,5,41,0,0,1631,1630,1,0,0,0,1631,
        1632,1,0,0,0,1632,1829,1,0,0,0,1633,1644,5,72,0,0,1634,1645,5,209,
        0,0,1635,1645,5,208,0,0,1636,1645,5,270,0,0,1637,1642,5,288,0,0,
        1638,1639,3,88,44,0,1639,1640,5,30,0,0,1640,1641,3,88,44,0,1641,
        1643,1,0,0,0,1642,1638,1,0,0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,
        0,1644,1634,1,0,0,0,1644,1635,1,0,0,0,1644,1636,1,0,0,0,1644,1637,
        1,0,0,0,1645,1829,1,0,0,0,1646,1647,5,79,0,0,1647,1649,7,27,0,0,
        1648,1650,7,28,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1829,
        1,0,0,0,1651,1652,5,81,0,0,1652,1829,7,26,0,0,1653,1654,5,86,0,0,
        1654,1829,7,26,0,0,1655,1656,5,87,0,0,1656,1657,5,288,0,0,1657,1829,
        3,104,52,0,1658,1659,5,88,0,0,1659,1660,5,288,0,0,1660,1829,3,88,
        44,0,1661,1663,5,89,0,0,1662,1664,5,288,0,0,1663,1662,1,0,0,0,1663,
        1664,1,0,0,0,1664,1665,1,0,0,0,1665,1829,3,120,60,0,1666,1667,5,
        96,0,0,1667,1668,5,288,0,0,1668,1829,3,104,52,0,1669,1670,7,29,0,
        0,1670,1829,7,26,0,0,1671,1672,5,123,0,0,1672,1829,7,26,0,0,1673,
        1674,5,125,0,0,1674,1829,7,26,0,0,1675,1676,5,127,0,0,1676,1829,
        7,26,0,0,1677,1678,5,133,0,0,1678,1684,5,288,0,0,1679,1682,3,104,
        52,0,1680,1681,5,152,0,0,1681,1683,3,104,52,0,1682,1680,1,0,0,0,
        1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1679,1,0,0,0,1684,1685,
        1,0,0,0,1685,1829,1,0,0,0,1686,1698,5,147,0,0,1687,1699,5,209,0,
        0,1688,1699,5,208,0,0,1689,1691,5,288,0,0,1690,1692,3,104,52,0,1691,
        1690,1,0,0,0,1691,1692,1,0,0,0,1692,1699,1,0,0,0,1693,1695,5,74,
        0,0,1694,1696,3,104,52,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,
        1699,1,0,0,0,1697,1699,5,277,0,0,1698,1687,1,0,0,0,1698,1688,1,0,
        0,0,1698,1689,1,0,0,0,1698,1693,1,0,0,0,1698,1697,1,0,0,0,1699,1829,
        1,0,0,0,1700,1701,5,154,0,0,1701,1703,5,288,0,0,1702,1704,3,104,
        52,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1829,1,0,0,0,1705,
        1706,5,162,0,0,1706,1707,5,288,0,0,1707,1709,3,104,52,0,1708,1710,
        5,41,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1829,1,0,0,0,1711,
        1712,5,175,0,0,1712,1713,5,288,0,0,1713,1829,3,88,44,0,1714,1715,
        5,183,0,0,1715,1829,7,26,0,0,1716,1717,5,185,0,0,1717,1829,7,26,
        0,0,1718,1720,5,201,0,0,1719,1721,5,86,0,0,1720,1719,1,0,0,0,1720,
        1721,1,0,0,0,1721,1722,1,0,0,0,1722,1829,7,26,0,0,1723,1724,5,211,
        0,0,1724,1741,5,288,0,0,1725,1742,3,104,52,0,1726,1728,5,280,0,0,
        1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,1732,
        3,104,52,0,1730,1731,5,207,0,0,1731,1733,3,104,52,0,1732,1730,1,
        0,0,0,1732,1733,1,0,0,0,1733,1736,1,0,0,0,1734,1735,5,152,0,0,1735,
        1737,3,104,52,0,1736,1734,1,0,0,0,1736,1737,1,0,0,0,1737,1739,1,
        0,0,0,1738,1740,7,15,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,
        1742,1,0,0,0,1741,1725,1,0,0,0,1741,1727,1,0,0,0,1741,1742,1,0,0,
        0,1742,1829,1,0,0,0,1743,1759,5,223,0,0,1744,1746,5,209,0,0,1745,
        1747,5,227,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1760,1,0,
        0,0,1748,1760,5,208,0,0,1749,1757,5,288,0,0,1750,1758,5,96,0,0,1751,
        1752,5,184,0,0,1752,1758,3,104,52,0,1753,1755,3,104,52,0,1754,1756,
        5,41,0,0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,
        1750,1,0,0,0,1757,1751,1,0,0,0,1757,1753,1,0,0,0,1757,1758,1,0,0,
        0,1758,1760,1,0,0,0,1759,1744,1,0,0,0,1759,1748,1,0,0,0,1759,1749,
        1,0,0,0,1760,1829,1,0,0,0,1761,1762,5,224,0,0,1762,1774,5,288,0,
        0,1763,1768,3,104,52,0,1764,1765,5,30,0,0,1765,1767,3,104,52,0,1766,
        1764,1,0,0,0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,
        0,1769,1772,1,0,0,0,1770,1768,1,0,0,0,1771,1773,5,41,0,0,1772,1771,
        1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,1763,1,0,0,0,1774,
        1775,1,0,0,0,1775,1829,1,0,0,0,1776,1777,5,234,0,0,1777,1778,5,288,
        0,0,1778,1781,3,88,44,0,1779,1780,5,30,0,0,1780,1782,3,88,44,0,1781,
        1779,1,0,0,0,1781,1782,1,0,0,0,1782,1829,1,0,0,0,1783,1784,5,236,
        0,0,1784,1785,5,288,0,0,1785,1786,3,88,44,0,1786,1787,5,157,0,0,
        1787,1790,3,104,52,0,1788,1789,5,152,0,0,1789,1791,3,104,52,0,1790,
        1788,1,0,0,0,1790,1791,1,0,0,0,1791,1793,1,0,0,0,1792,1794,5,41,
        0,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1829,1,0,0,0,1795,1796,
        5,250,0,0,1796,1829,7,26,0,0,1797,1799,5,270,0,0,1798,1800,5,55,
        0,0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1829,
        7,26,0,0,1802,1803,5,271,0,0,1803,1829,7,26,0,0,1804,1814,5,276,
        0,0,1805,1815,5,209,0,0,1806,1815,5,208,0,0,1807,1810,5,288,0,0,
        1808,1811,5,96,0,0,1809,1811,3,88,44,0,1810,1808,1,0,0,0,1810,1809,
        1,0,0,0,1810,1811,1,0,0,0,1811,1815,1,0,0,0,1812,1815,5,252,0,0,
        1813,1815,5,197,0,0,1814,1805,1,0,0,0,1814,1806,1,0,0,0,1814,1807,
        1,0,0,0,1814,1812,1,0,0,0,1814,1813,1,0,0,0,1815,1829,1,0,0,0,1816,
        1817,5,279,0,0,1817,1829,7,26,0,0,1818,1819,5,281,0,0,1819,1829,
        7,26,0,0,1820,1821,5,292,0,0,1821,1822,5,288,0,0,1822,1829,3,88,
        44,0,1823,1824,5,293,0,0,1824,1825,5,288,0,0,1825,1829,7,30,0,0,
        1826,1827,5,295,0,0,1827,1829,7,26,0,0,1828,1587,1,0,0,0,1828,1597,
        1,0,0,0,1828,1599,1,0,0,0,1828,1606,1,0,0,0,1828,1619,1,0,0,0,1828,
        1633,1,0,0,0,1828,1646,1,0,0,0,1828,1651,1,0,0,0,1828,1653,1,0,0,
        0,1828,1655,1,0,0,0,1828,1658,1,0,0,0,1828,1661,1,0,0,0,1828,1666,
        1,0,0,0,1828,1669,1,0,0,0,1828,1671,1,0,0,0,1828,1673,1,0,0,0,1828,
        1675,1,0,0,0,1828,1677,1,0,0,0,1828,1686,1,0,0,0,1828,1700,1,0,0,
        0,1828,1705,1,0,0,0,1828,1711,1,0,0,0,1828,1714,1,0,0,0,1828,1716,
        1,0,0,0,1828,1718,1,0,0,0,1828,1723,1,0,0,0,1828,1743,1,0,0,0,1828,
        1761,1,0,0,0,1828,1776,1,0,0,0,1828,1783,1,0,0,0,1828,1795,1,0,0,
        0,1828,1797,1,0,0,0,1828,1802,1,0,0,0,1828,1804,1,0,0,0,1828,1816,
        1,0,0,0,1828,1818,1,0,0,0,1828,1820,1,0,0,0,1828,1823,1,0,0,0,1828,
        1826,1,0,0,0,1829,73,1,0,0,0,1830,1831,3,108,54,0,1831,1832,3,114,
        57,0,1832,1838,1,0,0,0,1833,1835,3,110,55,0,1834,1836,3,78,39,0,
        1835,1834,1,0,0,0,1835,1836,1,0,0,0,1836,1838,1,0,0,0,1837,1830,
        1,0,0,0,1837,1833,1,0,0,0,1838,75,1,0,0,0,1839,1840,5,50,0,0,1840,
        1841,3,116,58,0,1841,77,1,0,0,0,1842,1845,3,76,38,0,1843,1844,5,
        207,0,0,1844,1846,3,104,52,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,
        1846,79,1,0,0,0,1847,1849,5,30,0,0,1848,1850,3,88,44,0,1849,1848,
        1,0,0,0,1849,1850,1,0,0,0,1850,81,1,0,0,0,1851,1855,3,88,44,0,1852,
        1854,3,80,40,0,1853,1852,1,0,0,0,1854,1857,1,0,0,0,1855,1853,1,0,
        0,0,1855,1856,1,0,0,0,1856,1864,1,0,0,0,1857,1855,1,0,0,0,1858,1860,
        3,80,40,0,1859,1858,1,0,0,0,1860,1861,1,0,0,0,1861,1859,1,0,0,0,
        1861,1862,1,0,0,0,1862,1864,1,0,0,0,1863,1851,1,0,0,0,1863,1859,
        1,0,0,0,1864,83,1,0,0,0,1865,1870,3,104,52,0,1866,1867,5,30,0,0,
        1867,1869,3,104,52,0,1868,1866,1,0,0,0,1869,1872,1,0,0,0,1870,1868,
        1,0,0,0,1870,1871,1,0,0,0,1871,85,1,0,0,0,1872,1870,1,0,0,0,1873,
        1874,5,6,0,0,1874,1875,3,110,55,0,1875,87,1,0,0,0,1876,1877,6,44,
        -1,0,1877,1878,5,16,0,0,1878,1879,3,88,44,0,1879,1880,5,17,0,0,1880,
        1904,1,0,0,0,1881,1882,7,31,0,0,1882,1904,3,88,44,12,1883,1884,7,
        32,0,0,1884,1904,3,88,44,11,1885,1904,3,106,53,0,1886,1887,5,65,
        0,0,1887,1888,5,16,0,0,1888,1889,3,88,44,0,1889,1890,3,76,38,0,1890,
        1891,5,17,0,0,1891,1904,1,0,0,0,1892,1898,5,11,0,0,1893,1894,3,110,
        55,0,1894,1895,5,32,0,0,1895,1896,5,32,0,0,1896,1898,1,0,0,0,1897,
        1892,1,0,0,0,1897,1893,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,
        0,1899,1901,3,96,48,0,1900,1902,3,98,49,0,1901,1900,1,0,0,0,1901,
        1902,1,0,0,0,1902,1904,1,0,0,0,1903,1876,1,0,0,0,1903,1881,1,0,0,
        0,1903,1883,1,0,0,0,1903,1885,1,0,0,0,1903,1886,1,0,0,0,1903,1897,
        1,0,0,0,1904,1934,1,0,0,0,1905,1909,10,10,0,0,1906,1907,5,7,0,0,
        1907,1910,5,7,0,0,1908,1910,5,29,0,0,1909,1906,1,0,0,0,1909,1908,
        1,0,0,0,1910,1911,1,0,0,0,1911,1933,3,88,44,11,1912,1913,10,9,0,
        0,1913,1914,7,33,0,0,1914,1933,3,88,44,10,1915,1916,10,8,0,0,1916,
        1917,5,27,0,0,1917,1933,3,88,44,9,1918,1919,10,7,0,0,1919,1920,7,
        31,0,0,1920,1933,3,88,44,8,1921,1922,10,6,0,0,1922,1923,7,34,0,0,
        1923,1933,3,88,44,7,1924,1925,10,5,0,0,1925,1926,3,90,45,0,1926,
        1927,3,88,44,6,1927,1933,1,0,0,0,1928,1929,10,4,0,0,1929,1930,3,
        92,46,0,1930,1931,3,88,44,5,1931,1933,1,0,0,0,1932,1905,1,0,0,0,
        1932,1912,1,0,0,0,1932,1915,1,0,0,0,1932,1918,1,0,0,0,1932,1921,
        1,0,0,0,1932,1924,1,0,0,0,1932,1928,1,0,0,0,1933,1936,1,0,0,0,1934,
        1932,1,0,0,0,1934,1935,1,0,0,0,1935,89,1,0,0,0,1936,1934,1,0,0,0,
        1937,1938,7,35,0,0,1938,91,1,0,0,0,1939,1940,7,36,0,0,1940,93,1,
        0,0,0,1941,1947,5,11,0,0,1942,1943,3,110,55,0,1943,1944,5,32,0,0,
        1944,1945,5,32,0,0,1945,1947,1,0,0,0,1946,1941,1,0,0,0,1946,1942,
        1,0,0,0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1949,3,96,48,0,
        1949,1950,3,98,49,0,1950,1963,1,0,0,0,1951,1957,5,11,0,0,1952,1953,
        3,110,55,0,1953,1954,5,32,0,0,1954,1955,5,32,0,0,1955,1957,1,0,0,
        0,1956,1951,1,0,0,0,1956,1952,1,0,0,0,1957,1958,1,0,0,0,1958,1960,
        3,96,48,0,1959,1961,3,98,49,0,1960,1959,1,0,0,0,1960,1961,1,0,0,
        0,1961,1963,1,0,0,0,1962,1946,1,0,0,0,1962,1956,1,0,0,0,1963,95,
        1,0,0,0,1964,1967,3,120,60,0,1965,1967,3,86,43,0,1966,1964,1,0,0,
        0,1966,1965,1,0,0,0,1967,97,1,0,0,0,1968,1970,5,16,0,0,1969,1971,
        3,82,41,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,
        1972,1979,5,17,0,0,1973,1975,5,12,0,0,1974,1976,3,82,41,0,1975,1974,
        1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1979,5,13,0,0,1978,
        1968,1,0,0,0,1978,1973,1,0,0,0,1979,1981,1,0,0,0,1980,1982,3,98,
        49,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1989,1,0,0,0,1983,
        1984,5,11,0,0,1984,1986,3,120,60,0,1985,1987,3,98,49,0,1986,1985,
        1,0,0,0,1986,1987,1,0,0,0,1987,1989,1,0,0,0,1988,1978,1,0,0,0,1988,
        1983,1,0,0,0,1989,99,1,0,0,0,1990,1991,3,120,60,0,1991,1992,5,32,
        0,0,1992,1994,1,0,0,0,1993,1990,1,0,0,0,1993,1994,1,0,0,0,1994,1996,
        1,0,0,0,1995,1997,3,102,51,0,1996,1995,1,0,0,0,1997,1998,1,0,0,0,
        1998,1999,1,0,0,0,1998,1996,1,0,0,0,1999,101,1,0,0,0,2000,2026,3,
        120,60,0,2001,2026,5,2,0,0,2002,2026,5,18,0,0,2003,2026,5,4,0,0,
        2004,2026,5,5,0,0,2005,2026,5,6,0,0,2006,2026,5,8,0,0,2007,2026,
        5,9,0,0,2008,2026,5,11,0,0,2009,2026,5,12,0,0,2010,2026,5,13,0,0,
        2011,2026,5,14,0,0,2012,2026,5,15,0,0,2013,2026,5,16,0,0,2014,2026,
        5,17,0,0,2015,2026,5,21,0,0,2016,2026,5,22,0,0,2017,2026,5,23,0,
        0,2018,2026,5,24,0,0,2019,2026,5,27,0,0,2020,2026,5,28,0,0,2021,
        2026,5,29,0,0,2022,2026,5,30,0,0,2023,2026,5,31,0,0,2024,2026,5,
        1,0,0,2025,2000,1,0,0,0,2025,2001,1,0,0,0,2025,2002,1,0,0,0,2025,
        2003,1,0,0,0,2025,2004,1,0,0,0,2025,2005,1,0,0,0,2025,2006,1,0,0,
        0,2025,2007,1,0,0,0,2025,2008,1,0,0,0,2025,2009,1,0,0,0,2025,2010,
        1,0,0,0,2025,2011,1,0,0,0,2025,2012,1,0,0,0,2025,2013,1,0,0,0,2025,
        2014,1,0,0,0,2025,2015,1,0,0,0,2025,2016,1,0,0,0,2025,2017,1,0,0,
        0,2025,2018,1,0,0,0,2025,2019,1,0,0,0,2025,2020,1,0,0,0,2025,2021,
        1,0,0,0,2025,2022,1,0,0,0,2025,2023,1,0,0,0,2025,2024,1,0,0,0,2026,
        103,1,0,0,0,2027,2030,3,88,44,0,2028,2030,3,100,50,0,2029,2027,1,
        0,0,0,2029,2028,1,0,0,0,2030,105,1,0,0,0,2031,2033,5,31,0,0,2032,
        2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2104,5,2,0,
        0,2035,2036,5,11,0,0,2036,2037,7,37,0,0,2037,2040,5,11,0,0,2038,
        2040,5,204,0,0,2039,2035,1,0,0,0,2039,2038,1,0,0,0,2040,2104,1,0,
        0,0,2041,2073,5,14,0,0,2042,2043,5,10,0,0,2043,2074,5,10,0,0,2044,
        2074,5,32,0,0,2045,2056,5,29,0,0,2046,2047,5,2,0,0,2047,2048,5,9,
        0,0,2048,2049,5,2,0,0,2049,2050,5,9,0,0,2050,2057,5,2,0,0,2051,2052,
        5,2,0,0,2052,2053,5,10,0,0,2053,2054,5,2,0,0,2054,2055,5,10,0,0,
        2055,2057,5,2,0,0,2056,2046,1,0,0,0,2056,2051,1,0,0,0,2057,2071,
        1,0,0,0,2058,2060,5,30,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,
        2061,1,0,0,0,2061,2068,5,2,0,0,2062,2063,5,32,0,0,2063,2066,5,2,
        0,0,2064,2065,5,32,0,0,2065,2067,5,2,0,0,2066,2064,1,0,0,0,2066,
        2067,1,0,0,0,2067,2069,1,0,0,0,2068,2062,1,0,0,0,2068,2069,1,0,0,
        0,2069,2070,1,0,0,0,2070,2072,3,120,60,0,2071,2059,1,0,0,0,2071,
        2072,1,0,0,0,2072,2074,1,0,0,0,2073,2042,1,0,0,0,2073,2044,1,0,0,
        0,2073,2045,1,0,0,0,2073,2074,1,0,0,0,2074,2075,1,0,0,0,2075,2104,
        5,15,0,0,2076,2080,5,35,0,0,2077,2079,8,38,0,0,2078,2077,1,0,0,0,
        2079,2082,1,0,0,0,2080,2078,1,0,0,0,2080,2081,1,0,0,0,2081,2083,
        1,0,0,0,2082,2080,1,0,0,0,2083,2101,5,35,0,0,2084,2088,5,34,0,0,
        2085,2087,8,39,0,0,2086,2085,1,0,0,0,2087,2090,1,0,0,0,2088,2086,
        1,0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2088,1,0,0,0,2091,
        2101,5,34,0,0,2092,2096,5,12,0,0,2093,2095,8,40,0,0,2094,2093,1,
        0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,
        2099,1,0,0,0,2098,2096,1,0,0,0,2099,2101,5,13,0,0,2100,2076,1,0,
        0,0,2100,2084,1,0,0,0,2100,2092,1,0,0,0,2101,2104,1,0,0,0,2102,2104,
        5,3,0,0,2103,2032,1,0,0,0,2103,2039,1,0,0,0,2103,2041,1,0,0,0,2103,
        2100,1,0,0,0,2103,2102,1,0,0,0,2104,107,1,0,0,0,2105,2107,5,11,0,
        0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2113,
        3,120,60,0,2109,2110,5,11,0,0,2110,2112,3,120,60,0,2111,2109,1,0,
        0,0,2112,2115,1,0,0,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,109,
        1,0,0,0,2115,2113,1,0,0,0,2116,2118,5,11,0,0,2117,2116,1,0,0,0,2117,
        2118,1,0,0,0,2118,2119,1,0,0,0,2119,2121,3,120,60,0,2120,2122,3,
        98,49,0,2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,111,1,0,0,0,2123,
        2124,3,88,44,0,2124,2125,5,30,0,0,2125,2126,3,88,44,0,2126,113,1,
        0,0,0,2127,2130,5,16,0,0,2128,2131,3,88,44,0,2129,2131,3,112,56,
        0,2130,2128,1,0,0,0,2130,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2133,
        5,17,0,0,2133,2142,1,0,0,0,2134,2137,5,12,0,0,2135,2138,3,88,44,
        0,2136,2138,3,112,56,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,
        2139,1,0,0,0,2139,2140,5,13,0,0,2140,2142,1,0,0,0,2141,2127,1,0,
        0,0,2141,2134,1,0,0,0,2142,115,1,0,0,0,2143,2144,3,110,55,0,2144,
        117,1,0,0,0,2145,2152,5,44,0,0,2146,2147,5,187,0,0,2147,2152,3,88,
        44,0,2148,2149,5,231,0,0,2149,2152,3,88,44,0,2150,2152,5,243,0,0,
        2151,2145,1,0,0,0,2151,2146,1,0,0,0,2151,2148,1,0,0,0,2151,2150,
        1,0,0,0,2152,119,1,0,0,0,2153,2154,7,41,0,0,2154,121,1,0,0,0,338,
        128,136,144,156,176,185,189,191,195,197,206,211,218,222,229,235,
        242,250,258,266,270,277,281,287,290,293,304,307,312,321,333,343,
        347,352,354,375,381,385,390,403,411,415,429,431,436,441,452,469,
        472,480,486,488,490,496,501,508,510,518,520,523,533,540,544,549,
        556,562,566,569,572,583,591,593,599,603,606,611,621,628,635,642,
        644,652,655,657,662,668,670,677,681,686,692,694,699,704,707,716,
        721,724,726,729,742,748,754,756,766,768,770,772,776,780,786,790,
        792,796,801,803,808,814,817,820,825,836,842,846,850,852,855,858,
        866,870,879,885,915,917,924,930,935,937,942,946,952,960,968,984,
        986,988,994,998,1002,1006,1011,1016,1018,1025,1034,1036,1043,1054,
        1056,1065,1068,1071,1074,1080,1082,1090,1092,1104,1113,1118,1125,
        1129,1131,1138,1140,1152,1156,1160,1168,1179,1185,1192,1196,1200,
        1205,1214,1216,1220,1230,1233,1236,1238,1242,1257,1262,1269,1271,
        1278,1281,1285,1293,1297,1299,1304,1311,1317,1323,1332,1336,1338,
        1344,1353,1355,1361,1364,1368,1372,1374,1399,1405,1411,1417,1420,
        1422,1427,1434,1437,1442,1447,1454,1458,1466,1468,1478,1483,1489,
        1516,1518,1530,1532,1546,1551,1559,1564,1572,1577,1580,1585,1593,
        1595,1604,1613,1615,1617,1624,1628,1631,1642,1644,1649,1663,1682,
        1684,1691,1695,1698,1703,1709,1720,1727,1732,1736,1739,1741,1746,
        1755,1757,1759,1768,1772,1774,1781,1790,1793,1799,1810,1814,1828,
        1835,1837,1845,1849,1855,1861,1863,1870,1897,1901,1903,1909,1932,
        1934,1946,1956,1960,1962,1966,1970,1975,1978,1981,1986,1988,1993,
        1998,2025,2029,2032,2039,2056,2059,2066,2068,2071,2073,2080,2088,
        2096,2100,2103,2106,2113,2117,2121,2130,2137,2141,2151
    ]

class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_'", "<INVALID>", "<INVALID>", "';'", 
                     "'&'", "'@'", "'*'", "'+'", "'-'", "'/'", "'.'", "'['", 
                     "']'", "'{'", "'}'", "'('", "')'", "'\\'", "'<'", "'>'", 
                     "'!'", "'#'", "'=='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'='", "'^'", "','", "'$'", "':'", "'?'", "'\"'", 
                     "'''", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "NUMBER_LITERAL", "BLOB_LITERAL", 
                      "SEMICOLON", "AMPERSAND", "COMMERCIALAT", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "FORWARDSLASH", "PERIOD", 
                      "LEFTBRACKET", "RIGHTBRACKET", "LEFTBRACE", "RIGHTBRACE", 
                      "LEFTPAREN", "RIGHTPAREN", "BACKSLASH", "LESSTHAN", 
                      "GREATERTHAN", "EXCLAMATION", "HASH", "DOUBLEEQUALS", 
                      "NOTEQUALS", "GTEQ", "LTEQ", "MODULO", "EQUALS", "CARAT", 
                      "COMMA", "DOLLAR", "COLON", "QUESTION", "DOUBLEQUOTE", 
                      "SINGLEQUOTE", "COMMENT", "LINECONT", "MACROLINE", 
                      "ACTIVATE", "ADD", "ADDITIVE", "AFTER", "ALIAS", "ALL", 
                      "ALTER", "ALTERNATE", "AND", "APPEND", "ARRAY", "AS", 
                      "ASCENDING", "ASSERT", "ASSERTS", "AT", "BAR", "BEFORE", 
                      "BELL", "BLANK", "BOOLEANCHAR", "BOTTOM", "BROWSE", 
                      "BY", "CANDIDATE", "CASE", "CAST", "CATCH", "CENTURY", 
                      "CHDIR", "CLASS", "CLASSLIB", "CLEAR", "CLOCK", "CLOSE", 
                      "COLLECTION", "COLOR", "COLUMN", "COMMAND", "COMPACT", 
                      "COMPATIBLE", "COMPILE", "CONSOLE", "CONTINUE", "COPY", 
                      "COUNT", "CREATE", "CURSOR", "DATABASE", "DATASESSION", 
                      "DATE", "DB4", "DBF", "DEACTIVATE", "DEBUG", "DEBUGOUT", 
                      "DECLARE", "DEFAULT", "DEFINE", "DELETE", "DELETED", 
                      "DESCENDING", "DIMENSION", "DISTINCT", "DLLS", "DO", 
                      "DOEVENTS", "DROP", "EACH", "ELIF", "ELSE", "ENCRYPT", 
                      "ENDCASE", "ENDDEFINE", "ENDDO", "ENDFOR", "ENDIF", 
                      "ENDPROC", "ENDSCAN", "ENDTEXT", "ENDTRY", "ENDWITH", 
                      "ERASE", "ERROR", "ESCAPE", "EVENTS", "EXACT", "EXCEPT", 
                      "EXCLUSIVE", "EXTENDED", "EXTERNAL", "FIELDS", "FILE", 
                      "FILL", "FILTER", "FINALLY", "FLAGS", "FONT", "FOR", 
                      "FORCE", "FORM", "FOXOBJECT", "FOXPLUS", "FREE", "FROM", 
                      "GATHER", "GETS", "GOTO", "HELP", "HIDE", "ICON", 
                      "IF", "IFDEF", "IN", "INCLUDE", "INDEX", "INDEXES", 
                      "INSERT", "INTO", "JOIN", "KEY", "KEYBOARD", "LABEL", 
                      "LIBRARY", "LIKE", "LINE", "LINKED", "LIST", "LOCATE", 
                      "MACROS", "MARGIN", "MARK", "MASTER", "MAX", "MEMO", 
                      "MEMORY", "MEMOWIDTH", "MEMVAR", "MENU", "MENUS", 
                      "MESSAGE", "MIN", "MKDIR", "MODIFY", "MULTILOCKS", 
                      "NAME", "NEAR", "NEGOTIATE", "NEXT", "NOCLEAR", "NOCONSOLE", 
                      "NODEBUG", "NOEJECT", "NOMARGIN", "NOMENU", "NOOPTIMIZE", 
                      "NOPROMPT", "NORM", "NOSAVE", "NOSHOW", "NOT", "NOTE", 
                      "NOTIFY", "NOUPDATE", "NOWAIT", "NULL", "NUMBER", 
                      "OBJECT", "OF", "OFF", "ON", "OR", "ORDER", "OTHERAND", 
                      "OTHERNOT", "OTHEROR", "OTHERWISE", "PACK", "PAD", 
                      "PARAMETER", "PLAIN", "POP", "POPUP", "PRETEXT", "PRINTER", 
                      "PROCEDURE", "PROGRAM", "PROGRAMCONTROL", "PROMPT", 
                      "PUSH", "READ", "RECALL", "RECORD", "RECYCLE", "REFERENCE", 
                      "REFRESH", "REINDEX", "RELATION", "RELATIVE", "RELEASE", 
                      "RENAME", "REPLACE", "REPORT", "RESOURCES", "REST", 
                      "RESTORE", "RETRY", "RETURN", "RMDIR", "ROLLOVER", 
                      "RUN", "SAFETY", "SAME", "SAVE", "SAY", "SCAN", "SCATTER", 
                      "SCHEME", "SCOPE", "SCREEN", "SEEK", "SELECT", "SELECTION", 
                      "SET", "SHADOW", "SHARED", "SHOW", "SHUTDOWN", "SIZE", 
                      "SKIPKW", "SORT", "STATUS", "STEP", "STORE", "STRUCTURE", 
                      "STYLE", "SUM", "SYSMENU", "SYSTEM", "TABLE", "TABLEPROMPT", 
                      "TAG", "TALK", "TEXT", "TEXTMERGE", "THEN", "THROW", 
                      "TIMEOUT", "TITLE", "TO", "TOP", "TRY", "TYPE", "TYPEAHEAD", 
                      "UDFPARMS", "UNDEFINE", "UNIQUE", "UNLOCK", "UPDATE", 
                      "USE", "VALUE", "VALUES", "WAIT", "WHEN", "WHERE", 
                      "WHILE", "WINDOW", "WITH", "ZAP", "ZOOM", "ID", "NL", 
                      "WS", "UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_nongreedyLines = 8
    RULE_classDefStart = 9
    RULE_classDef = 10
    RULE_classProperty = 11
    RULE_parameter = 12
    RULE_parameters = 13
    RULE_funcDefStart = 14
    RULE_funcDef = 15
    RULE_ifStart = 16
    RULE_ifStmt = 17
    RULE_forStart = 18
    RULE_forEnd = 19
    RULE_forStmt = 20
    RULE_singleCase = 21
    RULE_otherwise = 22
    RULE_caseStmt = 23
    RULE_whileStart = 24
    RULE_whileStmt = 25
    RULE_withStmt = 26
    RULE_scanStmt = 27
    RULE_tryStmt = 28
    RULE_controlStmt = 29
    RULE_cmd = 30
    RULE_queryCondition = 31
    RULE_textChunk = 32
    RULE_dllArgs = 33
    RULE_dllArg = 34
    RULE_tableField = 35
    RULE_setCmd = 36
    RULE_declarationItem = 37
    RULE_asType = 38
    RULE_asTypeOf = 39
    RULE_argsItem = 40
    RULE_args = 41
    RULE_specialArgs = 42
    RULE_reference = 43
    RULE_expr = 44
    RULE_andOp = 45
    RULE_orOp = 46
    RULE_complexId = 47
    RULE_atom = 48
    RULE_trailer = 49
    RULE_pathname = 50
    RULE_pathElement = 51
    RULE_specialExpr = 52
    RULE_constant = 53
    RULE_idAttr2 = 54
    RULE_idAttr = 55
    RULE_twoExpr = 56
    RULE_arrayIndex = 57
    RULE_datatype = 58
    RULE_scopeClause = 59
    RULE_identifier = 60

    ruleNames =  [ "preprocessorCode", "preprocessorLines", "preprocessorLine", 
                   "prg", "lineComment", "line", "lineEnd", "lines", "nongreedyLines", 
                   "classDefStart", "classDef", "classProperty", "parameter", 
                   "parameters", "funcDefStart", "funcDef", "ifStart", "ifStmt", 
                   "forStart", "forEnd", "forStmt", "singleCase", "otherwise", 
                   "caseStmt", "whileStart", "whileStmt", "withStmt", "scanStmt", 
                   "tryStmt", "controlStmt", "cmd", "queryCondition", "textChunk", 
                   "dllArgs", "dllArg", "tableField", "setCmd", "declarationItem", 
                   "asType", "asTypeOf", "argsItem", "args", "specialArgs", 
                   "reference", "expr", "andOp", "orOp", "complexId", "atom", 
                   "trailer", "pathname", "pathElement", "specialExpr", 
                   "constant", "idAttr2", "idAttr", "twoExpr", "arrayIndex", 
                   "datatype", "scopeClause", "identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    BLOB_LITERAL=3
    SEMICOLON=4
    AMPERSAND=5
    COMMERCIALAT=6
    ASTERISK=7
    PLUS_SIGN=8
    MINUS_SIGN=9
    FORWARDSLASH=10
    PERIOD=11
    LEFTBRACKET=12
    RIGHTBRACKET=13
    LEFTBRACE=14
    RIGHTBRACE=15
    LEFTPAREN=16
    RIGHTPAREN=17
    BACKSLASH=18
    LESSTHAN=19
    GREATERTHAN=20
    EXCLAMATION=21
    HASH=22
    DOUBLEEQUALS=23
    NOTEQUALS=24
    GTEQ=25
    LTEQ=26
    MODULO=27
    EQUALS=28
    CARAT=29
    COMMA=30
    DOLLAR=31
    COLON=32
    QUESTION=33
    DOUBLEQUOTE=34
    SINGLEQUOTE=35
    COMMENT=36
    LINECONT=37
    MACROLINE=38
    ACTIVATE=39
    ADD=40
    ADDITIVE=41
    AFTER=42
    ALIAS=43
    ALL=44
    ALTER=45
    ALTERNATE=46
    AND=47
    APPEND=48
    ARRAY=49
    AS=50
    ASCENDING=51
    ASSERT=52
    ASSERTS=53
    AT=54
    BAR=55
    BEFORE=56
    BELL=57
    BLANK=58
    BOOLEANCHAR=59
    BOTTOM=60
    BROWSE=61
    BY=62
    CANDIDATE=63
    CASE=64
    CAST=65
    CATCH=66
    CENTURY=67
    CHDIR=68
    CLASS=69
    CLASSLIB=70
    CLEAR=71
    CLOCK=72
    CLOSE=73
    COLLECTION=74
    COLOR=75
    COLUMN=76
    COMMAND=77
    COMPACT=78
    COMPATIBLE=79
    COMPILE=80
    CONSOLE=81
    CONTINUE=82
    COPY=83
    COUNT=84
    CREATE=85
    CURSOR=86
    DATABASE=87
    DATASESSION=88
    DATE=89
    DB4=90
    DBF=91
    DEACTIVATE=92
    DEBUG=93
    DEBUGOUT=94
    DECLARE=95
    DEFAULT=96
    DEFINE=97
    DELETE=98
    DELETED=99
    DESCENDING=100
    DIMENSION=101
    DISTINCT=102
    DLLS=103
    DO=104
    DOEVENTS=105
    DROP=106
    EACH=107
    ELIF=108
    ELSE=109
    ENCRYPT=110
    ENDCASE=111
    ENDDEFINE=112
    ENDDO=113
    ENDFOR=114
    ENDIF=115
    ENDPROC=116
    ENDSCAN=117
    ENDTEXT=118
    ENDTRY=119
    ENDWITH=120
    ERASE=121
    ERROR=122
    ESCAPE=123
    EVENTS=124
    EXACT=125
    EXCEPT=126
    EXCLUSIVE=127
    EXTENDED=128
    EXTERNAL=129
    FIELDS=130
    FILE=131
    FILL=132
    FILTER=133
    FINALLY=134
    FLAGS=135
    FONT=136
    FOR=137
    FORCE=138
    FORM=139
    FOXOBJECT=140
    FOXPLUS=141
    FREE=142
    FROM=143
    GATHER=144
    GETS=145
    GOTO=146
    HELP=147
    HIDE=148
    ICON=149
    IF=150
    IFDEF=151
    IN=152
    INCLUDE=153
    INDEX=154
    INDEXES=155
    INSERT=156
    INTO=157
    JOIN=158
    KEY=159
    KEYBOARD=160
    LABEL=161
    LIBRARY=162
    LIKE=163
    LINE=164
    LINKED=165
    LIST=166
    LOCATE=167
    MACROS=168
    MARGIN=169
    MARK=170
    MASTER=171
    MAX=172
    MEMO=173
    MEMORY=174
    MEMOWIDTH=175
    MEMVAR=176
    MENU=177
    MENUS=178
    MESSAGE=179
    MIN=180
    MKDIR=181
    MODIFY=182
    MULTILOCKS=183
    NAME=184
    NEAR=185
    NEGOTIATE=186
    NEXT=187
    NOCLEAR=188
    NOCONSOLE=189
    NODEBUG=190
    NOEJECT=191
    NOMARGIN=192
    NOMENU=193
    NOOPTIMIZE=194
    NOPROMPT=195
    NORM=196
    NOSAVE=197
    NOSHOW=198
    NOT=199
    NOTE=200
    NOTIFY=201
    NOUPDATE=202
    NOWAIT=203
    NULL=204
    NUMBER=205
    OBJECT=206
    OF=207
    OFF=208
    ON=209
    OR=210
    ORDER=211
    OTHERAND=212
    OTHERNOT=213
    OTHEROR=214
    OTHERWISE=215
    PACK=216
    PAD=217
    PARAMETER=218
    PLAIN=219
    POP=220
    POPUP=221
    PRETEXT=222
    PRINTER=223
    PROCEDURE=224
    PROGRAM=225
    PROGRAMCONTROL=226
    PROMPT=227
    PUSH=228
    READ=229
    RECALL=230
    RECORD=231
    RECYCLE=232
    REFERENCE=233
    REFRESH=234
    REINDEX=235
    RELATION=236
    RELATIVE=237
    RELEASE=238
    RENAME=239
    REPLACE=240
    REPORT=241
    RESOURCES=242
    REST=243
    RESTORE=244
    RETRY=245
    RETURN=246
    RMDIR=247
    ROLLOVER=248
    RUN=249
    SAFETY=250
    SAME=251
    SAVE=252
    SAY=253
    SCAN=254
    SCATTER=255
    SCHEME=256
    SCOPE=257
    SCREEN=258
    SEEK=259
    SELECT=260
    SELECTION=261
    SET=262
    SHADOW=263
    SHARED=264
    SHOW=265
    SHUTDOWN=266
    SIZE=267
    SKIPKW=268
    SORT=269
    STATUS=270
    STEP=271
    STORE=272
    STRUCTURE=273
    STYLE=274
    SUM=275
    SYSMENU=276
    SYSTEM=277
    TABLE=278
    TABLEPROMPT=279
    TAG=280
    TALK=281
    TEXT=282
    TEXTMERGE=283
    THEN=284
    THROW=285
    TIMEOUT=286
    TITLE=287
    TO=288
    TOP=289
    TRY=290
    TYPE=291
    TYPEAHEAD=292
    UDFPARMS=293
    UNDEFINE=294
    UNIQUE=295
    UNLOCK=296
    UPDATE=297
    USE=298
    VALUE=299
    VALUES=300
    WAIT=301
    WHEN=302
    WHERE=303
    WHILE=304
    WINDOW=305
    WITH=306
    ZAP=307
    ZOOM=308
    ID=309
    NL=310
    WS=311
    UNMATCHED=312

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PreprocessorCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorCode" ):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self.preprocessorLines()
            self.state = 123
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorLinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorLines" ):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 125
                    self.preprocessorLine() 
                self.state = 130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonpreprocessorLine" ):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorUndefine" ):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def HASH(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.HASH)
            else:
                return self.getToken(VisualFoxpro9Parser.HASH, i)
        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorIf" ):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorJunk" ):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorDefine" ):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.PreprocessorLineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreprocessorInclude" ):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 131
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [150]:
                    self.state = 132
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 133
                    self.expr(0)
                    pass
                elif token in [151]:
                    self.state = 134
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 135
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 138
                self.match(VisualFoxpro9Parser.NL)
                self.state = 139
                localctx.ifBody = self.preprocessorLines()
                self.state = 144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 140
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 141
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 142
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 143
                    localctx.elseBody = self.preprocessorLines()


                self.state = 146
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 147
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 148
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 151
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 152
                self.identifier()
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                    self.state = 153
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 159
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 161
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 162
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 163
                self.identifier()
                self.state = 164
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 166
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 167
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 168
                self.specialExpr()
                self.state = 169
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 171
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 172
                _la = self._input.LA(1)
                if _la <= 0 or (((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 81064793292935169) != 0 or _la==310:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                    self.state = 173
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 179
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [310]:
                    self.state = 180
                    self.match(VisualFoxpro9Parser.NL)
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312]:
                    self.state = 181
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==-1 or _la==22 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                        self.state = 182
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==310:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 188
                    self.lineEnd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrg" ):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97 or _la==224 or _la==257:
                self.state = 195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [97]:
                    self.state = 193
                    self.classDef()
                    pass
                elif token in [224, 257]:
                    self.state = 194
                    self.funcDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 200
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)

        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineComment" ):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                _la = self._input.LA(1)
                if not(_la==7 or _la==200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                    self.state = 203
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 209
                self.lineEnd()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(VisualFoxpro9Parser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def MACROLINE(self):
            return self.getToken(VisualFoxpro9Parser.MACROLINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine" ):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.lineComment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(VisualFoxpro9Parser.MACROLINE)
                self.state = 215
                self.lineEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 216
                    self.controlStmt()
                    pass

                elif la_ == 2:
                    self.state = 217
                    self.cmd()
                    pass


                self.state = 220
                self.lineEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineEnd" ):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==-1 or _la==310):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLines" ):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 226
                    self.line() 
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NongreedyLinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_nongreedyLines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNongreedyLines" ):
                return visitor.visitNongreedyLines(self)
            else:
                return visitor.visitChildren(self)




    def nongreedyLines(self):

        localctx = VisualFoxpro9Parser.NongreedyLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nongreedyLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 232
                    self.line() 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDefStart" ):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 239
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 240
            self.identifier()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 241
                self.asTypeOf()


            self.state = 244
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassPropertyContext,i)


        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDef" ):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.classDefStart()
            self.state = 250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 247
                    self.classProperty() 
                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 253
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 254
            self.lineEnd()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7 or _la==200 or _la==310:
                self.state = 255
                self.lineComment()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassProperty" ):
                return visitor.visitClassProperty(self)
            else:
                return visitor.visitChildren(self)




    def classProperty(self):

        localctx = VisualFoxpro9Parser.ClassPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classProperty)
        try:
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.cmd()
                self.state = 262
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.lineComment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.funcDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.idAttr()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 269
                self.asType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.parameter()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30:
                self.state = 273
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 274
                self.parameter()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncDefStart" ):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==257:
                self.state = 280
                self.match(VisualFoxpro9Parser.SCOPE)


            self.state = 283
            self.match(VisualFoxpro9Parser.PROCEDURE)
            self.state = 284
            self.idAttr2()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 285
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755811840) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 286
                    self.parameters()


                self.state = 289
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 292
                self.asType()


            self.state = 295
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncDef" ):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.funcDefStart()
            self.state = 298
            self.lines()
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(VisualFoxpro9Parser.ENDPROC)
                self.state = 300
                self.lineEnd()
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 301
                        self.lineComment() 
                    self.state = 306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStart" ):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(VisualFoxpro9Parser.IF)
            self.state = 310
            self.expr(0)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284:
                self.state = 311
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 314
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.ifStart()
            self.state = 317
            localctx.ifBody = self.lines()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 318
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 319
                self.match(VisualFoxpro9Parser.NL)
                self.state = 320
                localctx.elseBody = self.lines()


            self.state = 323
            self.match(VisualFoxpro9Parser.ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def FOXOBJECT(self):
            return self.getToken(VisualFoxpro9Parser.FOXOBJECT, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStart" ):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 326
                self.idAttr()
                self.state = 327
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 328
                localctx.loopStart = self.expr(0)
                self.state = 329
                self.match(VisualFoxpro9Parser.TO)
                self.state = 330
                localctx.loopStop = self.expr(0)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271:
                    self.state = 331
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 332
                    localctx.loopStep = self.expr(0)


                self.state = 335
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 338
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 339
                self.idAttr()
                self.state = 340
                self.match(VisualFoxpro9Parser.IN)
                self.state = 341
                self.expr(0)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 342
                    self.match(VisualFoxpro9Parser.FOXOBJECT)


                self.state = 345
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEnd" ):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.state = 349
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [187]:
                self.state = 350
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755811840) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 351
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.forStart()
            self.state = 357
            self.lines()
            self.state = 358
            self.forEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def nongreedyLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.NongreedyLinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleCase" ):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 361
            self.expr(0)
            self.state = 362
            self.match(VisualFoxpro9Parser.NL)
            self.state = 363
            self.nongreedyLines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherwiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherwise" ):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 366
            self.match(VisualFoxpro9Parser.NL)
            self.state = 367
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def singleCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SingleCaseContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStmt" ):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(VisualFoxpro9Parser.DO)
            self.state = 370
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 371
            self.match(VisualFoxpro9Parser.NL)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7 or _la==200 or _la==310:
                self.state = 372
                self.lineComment()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 378
                self.singleCase()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==215:
                self.state = 384
                self.otherwise()


            self.state = 387
            self.match(VisualFoxpro9Parser.ENDCASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStart" ):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 389
                self.match(VisualFoxpro9Parser.DO)


            self.state = 392
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 393
            self.expr(0)
            self.state = 394
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.whileStart()
            self.state = 397
            self.lines()
            self.state = 398
            self.match(VisualFoxpro9Parser.ENDDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStmt" ):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 401
            self.idAttr()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 402
                self.asTypeOf()


            self.state = 405
            self.match(VisualFoxpro9Parser.NL)
            self.state = 406
            self.lines()
            self.state = 407
            self.match(VisualFoxpro9Parser.ENDWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanStmt" ):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44 or (((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & 72075186223972353) != 0:
                self.state = 410
                self.scopeClause()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 413
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 414
                self.expr(0)


            self.state = 417
            self.match(VisualFoxpro9Parser.NL)
            self.state = 418
            self.lines()
            self.state = 419
            self.match(VisualFoxpro9Parser.ENDSCAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHEN)
            else:
                return self.getToken(VisualFoxpro9Parser.WHEN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStmt" ):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 422
            self.match(VisualFoxpro9Parser.NL)
            self.state = 423
            localctx.tryLines = self.lines()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 424
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==288 or _la==302:
                    self.state = 429
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [302]:
                        self.state = 425
                        self.match(VisualFoxpro9Parser.WHEN)
                        self.state = 426
                        self.expr(0)
                        pass
                    elif token in [288]:
                        self.state = 427
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 428
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self.match(VisualFoxpro9Parser.NL)
                self.state = 435
                localctx.catchLines = self.lines()


            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 438
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 439
                self.match(VisualFoxpro9Parser.NL)
                self.state = 440
                localctx.finallyLines = self.lines()


            self.state = 443
            self.match(VisualFoxpro9Parser.ENDTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStmt" ):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_controlStmt)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 445
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 446
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 448
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 449
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 450
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 451
                self.tryStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThrowErrorContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowError" ):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)
        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefineMenu" ):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOn" ):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class ReleaseContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.vartype = None # Token
            self.copyFrom(ctx)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelease" ):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.workArea = None # SpecialExprContext
            self.orderExpr = None # ExprContext
            self.aliasExpr = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def ORDER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ORDER)
            else:
                return self.getToken(VisualFoxpro9Parser.ORDER, i)
        def ALIAS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALIAS)
            else:
                return self.getToken(VisualFoxpro9Parser.ALIAS, i)
        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def NOUPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOUPDATE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOUPDATE, i)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TAG(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TAG)
            else:
                return self.getToken(VisualFoxpro9Parser.TAG, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplace" ):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearStmt" ):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class WaitCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext
            self.copyFrom(ctx)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def WINDOW(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def NOWAIT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)
        def CLEAR(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)
        def NOCLEAR(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)
        def TIMEOUT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitCmd" ):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeactivate" ):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToArrayContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def ARRAY(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ARRAY)
            else:
                return self.getToken(VisualFoxpro9Parser.ARRAY, i)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyToArray" ):
                return visitor.visitCopyToArray(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyTo" ):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadEvent" ):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class ComplexIdCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexIdCmd" ):
                return visitor.visitComplexIdCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppendFrom" ):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueLocate" ):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def FORWARDSLASH(self):
            return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShellRun" ):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class ZoomCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)
        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)
        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)
        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZoomCmd" ):
                return visitor.visitZoomCmd(self)
            else:
                return visitor.visitChildren(self)


    class SaveToCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSaveToCmd" ):
                return visitor.visitSaveToCmd(self)
            else:
                return visitor.visitChildren(self)


    class SetStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStmt" ):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex" ):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCount" ):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)


    class AtPosContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.toArgs = None # ArgsContext
            self.sayExpr = None # ExprContext
            self.styleExpr = None # ExprContext
            self.copyFrom(ctx)

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def SAY(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SAY)
            else:
                return self.getToken(VisualFoxpro9Parser.SAY, i)
        def STYLE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtPos" ):
                return visitor.visitAtPos(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPack" ):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class PushContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPush" ):
                return visitor.visitPush(self)
            else:
                return visitor.visitChildren(self)


    class ListStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)
        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListStmt" ):
                return visitor.visitListStmt(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActivateMenu" ):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseError" ):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALTER)
            else:
                return self.getToken(VisualFoxpro9Parser.ALTER, i)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADD)
            else:
                return self.getToken(VisualFoxpro9Parser.ADD, i)
        def COLUMN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLUMN)
            else:
                return self.getToken(VisualFoxpro9Parser.COLUMN, i)
        def tableField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DROP)
            else:
                return self.getToken(VisualFoxpro9Parser.DROP, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOT, i)
        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NULL)
            else:
                return self.getToken(VisualFoxpro9Parser.NULL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTable" ):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBrowse" ):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoRecord" ):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class RestoreCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestoreCmd" ):
                return visitor.visitRestoreCmd(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def tableField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ModifyWindowContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def SIZE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SIZE)
            else:
                return self.getToken(VisualFoxpro9Parser.SIZE, i)
        def FONT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FONT)
            else:
                return self.getToken(VisualFoxpro9Parser.FONT, i)
        def STYLE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TITLE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TITLE)
            else:
                return self.getToken(VisualFoxpro9Parser.TITLE, i)
        def ICON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ICON)
            else:
                return self.getToken(VisualFoxpro9Parser.ICON, i)
        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILE)
            else:
                return self.getToken(VisualFoxpro9Parser.FILE, i)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FILL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILL)
            else:
                return self.getToken(VisualFoxpro9Parser.FILL, i)
        def COLOR(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLOR)
            else:
                return self.getToken(VisualFoxpro9Parser.COLOR, i)
        def SCHEME(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCHEME)
            else:
                return self.getToken(VisualFoxpro9Parser.SCHEME, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifyWindow" ):
                return visitor.visitModifyWindow(self)
            else:
                return visitor.visitChildren(self)


    class ActivatePopupContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActivatePopup" ):
                return visitor.visitActivatePopup(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocate" ):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def LEFTPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LEFTPAREN)
            else:
                return self.getToken(VisualFoxpro9Parser.LEFTPAREN, i)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def RIGHTPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.RIGHTPAREN)
            else:
                return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, i)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert" ):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.toExpr = None # ExprContext
            self.sumExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum" ):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class ShowCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCmd" ):
                return visitor.visitShowCmd(self)
            else:
                return visitor.visitChildren(self)


    class ActivateScreenContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActivateScreen" ):
                return visitor.visitActivateScreen(self)
            else:
                return visitor.visitChildren(self)


    class PopContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MASTER)
            else:
                return self.getToken(VisualFoxpro9Parser.MASTER, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPop" ):
                return visitor.visitPop(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChMkRmDir" ):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZapTable" ):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllDeclare" ):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeekRecord" ):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActivateWindow" ):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert" ):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class OnStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnStmt" ):
                return visitor.visitOnStmt(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def MEMO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMO)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMO, i)
        def MEMVAR(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMVAR)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMVAR, i)
        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def LIKE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGatherExpr" ):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class FuncDoContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.nameId = None # IdentifierContext
            self.toId = None # IdentifierContext
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def NOSHOW(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def LINKED(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LINKED)
            else:
                return self.getToken(VisualFoxpro9Parser.LINKED, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncDo" ):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStmt" ):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class RetryContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETRY(self):
            return self.getToken(VisualFoxpro9Parser.RETRY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetry" ):
                return visitor.visitRetry(self)
            else:
                return visitor.visitChildren(self)


    class DeleteFileContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFile" ):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinePopup" ):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class UpdateCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.tableExpr = None # SpecialExprContext
            self.fromArgs = None # SpecialArgsContext
            self.joinArgs = None # SpecialArgsContext
            self.whereExpr = None # ExprContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)
        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EQUALS)
            else:
                return self.getToken(VisualFoxpro9Parser.EQUALS, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def JOIN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.JOIN)
            else:
                return self.getToken(VisualFoxpro9Parser.JOIN, i)
        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHERE)
            else:
                return self.getToken(VisualFoxpro9Parser.WHERE, i)
        def specialArgs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORCE)
            else:
                return self.getToken(VisualFoxpro9Parser.FORCE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateCmd" ):
                return visitor.visitUpdateCmd(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyboard" ):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class UnlockCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockCmd" ):
                return visitor.visitUnlockCmd(self)
            else:
                return visitor.visitChildren(self)


    class ProgramControlContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramControl" ):
                return visitor.visitProgramControl(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipRecord" ):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class TextBlockContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.flagExpr = None # ExprContext
            self.pretext = None # ExprContext
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)
        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)
        def textChunk(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TextChunkContext,0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def idAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def ADDITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADDITIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.ADDITIVE, i)
        def TEXTMERGE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TEXTMERGE)
            else:
                return self.getToken(VisualFoxpro9Parser.TEXTMERGE, i)
        def NOSHOW(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def FLAGS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FLAGS)
            else:
                return self.getToken(VisualFoxpro9Parser.FLAGS, i)
        def PRETEXT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRETEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.PRETEXT, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextBlock" ):
                return visitor.visitTextBlock(self)
            else:
                return visitor.visitChildren(self)


    class DeclarationContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DeclarationItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationItemContext,i)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)
        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)
        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class SortCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def FORWARDSLASH(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORWARDSLASH)
            else:
                return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def ASCENDING(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ASCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.ASCENDING, i)
        def DESCENDING(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DESCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.DESCENDING, i)
        def FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortCmd" ):
                return visitor.visitSortCmd(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinePad" ):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefineBar" ):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class PrintStmtContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.QUESTION)
            else:
                return self.getToken(VisualFoxpro9Parser.QUESTION, i)
        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStmt" ):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyMoveFile" ):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)


    class AddObjectContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def idAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EQUALS)
            else:
                return self.getToken(VisualFoxpro9Parser.EQUALS, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddObject" ):
                return visitor.visitAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReport" ):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class ModifyFileContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)
        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def WINDOW(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def SCREEN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCREEN)
            else:
                return self.getToken(VisualFoxpro9Parser.SCREEN, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifyFile" ):
                return visitor.visitModifyFile(self)
            else:
                return visitor.visitChildren(self)


    class CompileCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)
        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALL)
            else:
                return self.getToken(VisualFoxpro9Parser.ALL, i)
        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENCRYPT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENCRYPT, i)
        def NODEBUG(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NODEBUG)
            else:
                return self.getToken(VisualFoxpro9Parser.NODEBUG, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompileCmd" ):
                return visitor.visitCompileCmd(self)
            else:
                return visitor.visitChildren(self)


    class HideCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHideCmd" ):
                return visitor.visitHideCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppend" ):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def MEMO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMO)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMO, i)
        def BLANK(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.BLANK)
            else:
                return self.getToken(VisualFoxpro9Parser.BLANK, i)
        def MEMVAR(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMVAR)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMVAR, i)
        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def ADDITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADDITIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.ADDITIVE, i)
        def LIKE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScatterExpr" ):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class AssignContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def idAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def queryCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteRecord" ):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)


    class ExprCmdContext(CmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.CmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprCmd" ):
                return visitor.visitExprCmd(self)
            else:
                return visitor.visitChildren(self)



    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_cmd)
        self._la = 0 # Token type
        try:
            self.state = 1551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.AddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 455
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 456
                self.identifier()
                self.state = 457
                self.asType()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 458
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 459
                    self.idAttr()
                    self.state = 460
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 461
                    self.expr(0)
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==30:
                        self.state = 462
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 463
                        self.idAttr()
                        self.state = 464
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 465
                        self.expr(0)
                        self.state = 471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ProgramControlContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.match(VisualFoxpro9Parser.PROGRAMCONTROL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.AtPosContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                self.state = 476
                self.args()
                self.state = 490
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71]:
                    self.state = 477
                    self.match(VisualFoxpro9Parser.CLEAR)
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==288:
                        self.state = 478
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 479
                        localctx.toArgs = self.args()


                    pass
                elif token in [253, 274]:
                    self.state = 486 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 486
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [253]:
                            self.state = 482
                            self.match(VisualFoxpro9Parser.SAY)
                            self.state = 483
                            localctx.sayExpr = self.expr(0)
                            pass
                        elif token in [274]:
                            self.state = 484
                            self.match(VisualFoxpro9Parser.STYLE)
                            self.state = 485
                            localctx.styleExpr = self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 488 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==253 or _la==274):
                            break

                    pass
                elif token in [-1, 310]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.FuncDoContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.match(VisualFoxpro9Parser.DO)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 493
                    self.match(VisualFoxpro9Parser.FORM)
                    self.state = 496
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [33]:
                        self.state = 494
                        self.match(VisualFoxpro9Parser.QUESTION)
                        pass
                    elif token in [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                        self.state = 495
                        self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==184 or _la==198 or _la==288 or _la==306:
                        self.state = 508
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [184]:
                            self.state = 498
                            self.match(VisualFoxpro9Parser.NAME)
                            self.state = 499
                            localctx.nameId = self.identifier()
                            self.state = 501
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==165:
                                self.state = 500
                                self.match(VisualFoxpro9Parser.LINKED)


                            pass
                        elif token in [306]:
                            self.state = 503
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 504
                            self.args()
                            pass
                        elif token in [288]:
                            self.state = 505
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 506
                            localctx.toId = self.identifier()
                            pass
                        elif token in [198]:
                            self.state = 507
                            self.match(VisualFoxpro9Parser.NOSHOW)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 512
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 513
                    self.specialExpr()
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==152 or _la==306:
                        self.state = 518
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [152]:
                            self.state = 514
                            self.match(VisualFoxpro9Parser.IN)
                            self.state = 515
                            self.specialExpr()
                            pass
                        elif token in [306]:
                            self.state = 516
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 517
                            self.args()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 522
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(VisualFoxpro9Parser.STORE)
                    self.state = 526
                    self.expr(0)
                    self.state = 527
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 528
                    self.idAttr()
                    self.state = 533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==30:
                        self.state = 529
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 530
                        self.idAttr()
                        self.state = 535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 536
                    self.idAttr()
                    self.state = 537
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 538
                    self.expr(0)
                    pass


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.DeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 549
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [129, 257]:
                        self.state = 542
                        _la = self._input.LA(1)
                        if not(_la==129 or _la==257):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 544
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                        if la_ == 1:
                            self.state = 543
                            _la = self._input.LA(1)
                            if not((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4573968371548161) != 0):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [101]:
                        self.state = 546
                        self.match(VisualFoxpro9Parser.DIMENSION)
                        pass
                    elif token in [95]:
                        self.state = 547
                        self.match(VisualFoxpro9Parser.DECLARE)
                        pass
                    elif token in [218]:
                        self.state = 548
                        self.match(VisualFoxpro9Parser.PARAMETER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 551
                    self.declarationItem()
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==30:
                        self.state = 552
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 553
                        self.declarationItem()
                        self.state = 558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 559
                    self.match(VisualFoxpro9Parser.EXTERNAL)
                    self.state = 560
                    self.match(VisualFoxpro9Parser.PROCEDURE)
                    self.state = 561
                    self.specialExpr()
                    pass


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.PrintStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [33]:
                    self.state = 564
                    self.match(VisualFoxpro9Parser.QUESTION)
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33:
                        self.state = 565
                        self.match(VisualFoxpro9Parser.QUESTION)


                    pass
                elif token in [94]:
                    self.state = 568
                    self.match(VisualFoxpro9Parser.DEBUGOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494992794804) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 571
                    self.args()


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.WaitCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 574
                self.match(VisualFoxpro9Parser.WAIT)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 591
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        self.state = 575
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 576
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 577
                        self.match(VisualFoxpro9Parser.WINDOW)
                        self.state = 583
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 578
                            self.match(VisualFoxpro9Parser.AT)
                            self.state = 579
                            localctx.atExpr1 = self.expr(0)
                            self.state = 580
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 581
                            localctx.atExpr2 = self.expr(0)


                        pass

                    elif la_ == 3:
                        self.state = 585
                        self.match(VisualFoxpro9Parser.NOWAIT)
                        pass

                    elif la_ == 4:
                        self.state = 586
                        self.match(VisualFoxpro9Parser.CLEAR)
                        pass

                    elif la_ == 5:
                        self.state = 587
                        self.match(VisualFoxpro9Parser.NOCLEAR)
                        pass

                    elif la_ == 6:
                        self.state = 588
                        self.match(VisualFoxpro9Parser.TIMEOUT)
                        self.state = 589
                        localctx.timeout = self.expr(0)
                        pass

                    elif la_ == 7:
                        self.state = 590
                        localctx.message = self.expr(0)
                        pass


                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 599
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [121]:
                    self.state = 596
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [98]:
                    self.state = 597
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 598
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 603
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                    self.state = 601
                    self.specialExpr()
                    pass
                elif token in [33]:
                    self.state = 602
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 605
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [239]:
                    self.state = 608
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [83]:
                    self.state = 609
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 610
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 613
                self.specialExpr()
                self.state = 614
                self.match(VisualFoxpro9Parser.TO)
                self.state = 615
                self.specialExpr()
                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 617
                _la = self._input.LA(1)
                if not(_la==68 or _la==181 or _la==247):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 618
                self.specialExpr()
                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 619
                self.match(VisualFoxpro9Parser.RETURN)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 620
                    self.expr(0)


                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.OnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 623
                self.match(VisualFoxpro9Parser.ON)
                self.state = 657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 628
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [217]:
                        self.state = 624
                        self.match(VisualFoxpro9Parser.PAD)
                        self.state = 625
                        self.specialExpr()
                        pass
                    elif token in [55]:
                        self.state = 626
                        self.match(VisualFoxpro9Parser.BAR)
                        self.state = 627
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 630
                    self.match(VisualFoxpro9Parser.OF)
                    self.state = 631
                    self.specialExpr()
                    self.state = 635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==39:
                        self.state = 632
                        self.match(VisualFoxpro9Parser.ACTIVATE)
                        self.state = 633
                        _la = self._input.LA(1)
                        if not(_la==177 or _la==221):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 634
                        self.specialExpr()


                    pass

                elif la_ == 2:
                    self.state = 652
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 637
                        self.match(VisualFoxpro9Parser.KEY)
                        self.state = 644
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                        if la_ == 1:
                            self.state = 638
                            self.match(VisualFoxpro9Parser.LABEL)
                            self.state = 639
                            self.identifier()
                            self.state = 642
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==8:
                                self.state = 640
                                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                                self.state = 641
                                self.identifier()




                        pass

                    elif la_ == 2:
                        self.state = 646
                        self.match(VisualFoxpro9Parser.SELECTION)
                        self.state = 647
                        self.match(VisualFoxpro9Parser.BAR)
                        self.state = 648
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 649
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 650
                        self.specialExpr()
                        pass

                    elif la_ == 3:
                        self.state = 651
                        self.identifier()
                        pass


                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -540895344576) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 654
                        self.cmd()


                    pass


                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.ReleaseContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 659
                self.match(VisualFoxpro9Parser.RELEASE)
                self.state = 670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 662
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 661
                        localctx.vartype = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==70 or _la==224):
                            localctx.vartype = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 664
                    self.args()
                    pass

                elif la_ == 3:
                    self.state = 665
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 666
                    self.args()
                    self.state = 668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==128:
                        self.state = 667
                        self.match(VisualFoxpro9Parser.EXTENDED)


                    pass


                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.SetStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 672
                self.match(VisualFoxpro9Parser.SET)
                self.state = 673
                self.setCmd()
                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.PushContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 674
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [159]:
                    self.state = 675
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==71:
                        self.state = 676
                        self.match(VisualFoxpro9Parser.CLEAR)


                    pass
                elif token in [177, 221]:
                    self.state = 679
                    _la = self._input.LA(1)
                    if not(_la==177 or _la==221):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 680
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.PopContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 683
                self.match(VisualFoxpro9Parser.POP)
                self.state = 699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [159]:
                    self.state = 684
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==44:
                        self.state = 685
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [177]:
                    self.state = 688
                    self.match(VisualFoxpro9Parser.MENU)
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755813888) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 692
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                        if la_ == 1:
                            self.state = 689
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 690
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 691
                            self.match(VisualFoxpro9Parser.MASTER)
                            pass


                        self.state = 696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [221]:
                    self.state = 697
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 698
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 701
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 702
                self.expr(0)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 703
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 706
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 709
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 710
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 711
                self.specialExpr()

                self.state = 712
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 713
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 714
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 715
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 718
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 724
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        self.state = 719
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass

                    elif la_ == 2:
                        self.state = 721
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                        if la_ == 1:
                            self.state = 720
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 723
                        self.specialExpr()
                        pass




                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 728
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 731
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 732
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 733
                self.specialExpr()
                self.state = 734
                self.match(VisualFoxpro9Parser.OF)
                self.state = 735
                self.specialExpr()
                self.state = 736
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 737
                self.expr(0)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 738
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 739
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 740
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 741
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 744
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 745
                    self.identifier()
                    pass
                elif token in [42]:
                    self.state = 746
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 747
                    self.identifier()
                    pass
                elif token in [-1, 75, 136, 159, 170, 179, 186, 268, 274, 310]:
                    pass
                else:
                    pass
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 750
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 751
                    self.identifier()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==30:
                        self.state = 752
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 753
                        self.identifier()




                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 758
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 759
                    self.identifier()
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==30:
                        self.state = 760
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 761
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 768
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==30:
                            self.state = 762
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 763
                            self.expr(0)
                            self.state = 766
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==30:
                                self.state = 764
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 765
                                self.identifier()








                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 774
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 775
                    self.identifier()


                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 778
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 779
                    self.expr(0)


                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 782
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 783
                    self.identifier()
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 784
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 785
                        self.identifier()


                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==30:
                        self.state = 788
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 789
                        self.expr(0)




                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 794
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 795
                    self.identifier()


                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 798
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==137:
                        self.state = 799
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 800
                        self.expr(0)




                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 805
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 806
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 807
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 810
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 811
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 812
                self.specialExpr()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 813
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 816
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==237:
                    self.state = 819
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 822
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 823
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 824
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 827
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 828
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 829
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 830
                self.match(VisualFoxpro9Parser.OF)
                self.state = 831
                self.specialExpr()
                self.state = 832
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 833
                self.expr(0)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 834
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 835
                    self.expr(0)


                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 838
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 839
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 840
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 841
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 844
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                    if la_ == 1:
                        self.state = 846
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 845
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 848
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 849
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or _la==251 or _la==289:
                    self.state = 854
                    _la = self._input.LA(1)
                    if not(_la==60 or _la==251 or _la==289):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==198:
                    self.state = 857
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.ActivateScreenContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 860
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 861
                self.match(VisualFoxpro9Parser.SCREEN)
                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 862
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 863
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 864
                self.specialExpr()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 865
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 868
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 869
                    self.specialExpr()


                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.ActivatePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 872
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 873
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 874
                self.identifier()
                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 875
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 876
                _la = self._input.LA(1)
                if not(_la==177 or _la==221):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 877
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 878
                    self.parameters()
                    pass


                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.ModifyWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 881
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 882
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 883
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 2:
                    self.state = 884
                    self.identifier()
                    pass


                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755813888) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 915
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                    if la_ == 1:
                        self.state = 887
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 888
                        self.args()
                        self.state = 889
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 890
                        self.args()
                        pass

                    elif la_ == 2:
                        self.state = 892
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 893
                        self.args()
                        self.state = 894
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 895
                        self.args()
                        pass

                    elif la_ == 3:
                        self.state = 897
                        self.match(VisualFoxpro9Parser.FONT)
                        self.state = 898
                        self.args()
                        pass

                    elif la_ == 4:
                        self.state = 899
                        self.match(VisualFoxpro9Parser.STYLE)
                        self.state = 900
                        self.expr(0)
                        pass

                    elif la_ == 5:
                        self.state = 901
                        self.match(VisualFoxpro9Parser.TITLE)
                        self.state = 902
                        self.expr(0)
                        pass

                    elif la_ == 6:
                        self.state = 903
                        self.identifier()
                        pass

                    elif la_ == 7:
                        self.state = 904
                        self.match(VisualFoxpro9Parser.ICON)
                        self.state = 905
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 906
                        self.specialExpr()
                        pass

                    elif la_ == 8:
                        self.state = 907
                        self.match(VisualFoxpro9Parser.FILL)
                        self.state = 908
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 909
                        self.specialExpr()
                        pass

                    elif la_ == 9:
                        self.state = 910
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 911
                        self.match(VisualFoxpro9Parser.SCHEME)
                        self.state = 912
                        self.expr(0)
                        pass

                    elif la_ == 10:
                        self.state = 913
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 914
                        self.args()
                        pass


                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.ModifyFileContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 920
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 921
                _la = self._input.LA(1)
                if not(_la==77 or _la==131):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 924
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [33]:
                    self.state = 922
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                    self.state = 923
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755813888) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 935
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                    if la_ == 1:
                        self.state = 926
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 930
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [305]:
                            self.state = 927
                            self.match(VisualFoxpro9Parser.WINDOW)
                            self.state = 928
                            self.identifier()
                            pass
                        elif token in [258]:
                            self.state = 929
                            self.match(VisualFoxpro9Parser.SCREEN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 932
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 933
                        self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 934
                        self.identifier()
                        pass


                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 940
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 941
                    self.expr(0)


                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 944
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 945
                    self.expr(0)


                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 948
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 949
                _la = self._input.LA(1)
                if not(_la==86 or _la==91 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 950
                self.specialExpr()
                self.state = 968
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16, 142]:
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==142:
                        self.state = 951
                        self.match(VisualFoxpro9Parser.FREE)


                    self.state = 954
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 955
                    self.tableField()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==30:
                        self.state = 956
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 957
                        self.tableField()
                        self.state = 962
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 963
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [143]:
                    self.state = 965
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 966
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 967
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 970
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 971
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 972
                self.specialExpr()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==40 or _la==45 or _la==106:
                    self.state = 986
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [40]:
                        self.state = 973
                        self.match(VisualFoxpro9Parser.ADD)
                        self.state = 974
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 975
                        self.tableField()
                        pass
                    elif token in [106]:
                        self.state = 976
                        self.match(VisualFoxpro9Parser.DROP)
                        self.state = 977
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 978
                        self.identifier()
                        pass
                    elif token in [45]:
                        self.state = 979
                        self.match(VisualFoxpro9Parser.ALTER)
                        self.state = 980
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 981
                        self.identifier()
                        self.state = 984
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==199:
                            self.state = 982
                            self.match(VisualFoxpro9Parser.NOT)
                            self.state = 983
                            self.match(VisualFoxpro9Parser.NULL)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 991
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 1018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 992
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 994
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        self.state = 993
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 998
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                        self.state = 996
                        self.specialArgs()
                        pass
                    elif token in [7]:
                        self.state = 997
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 1000
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1001
                        localctx.fromExpr = self.specialExpr()


                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==303:
                        self.state = 1004
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 1005
                        localctx.whereExpr = self.expr(0)


                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==157:
                        self.state = 1008
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 1009
                        _la = self._input.LA(1)
                        if not(_la==86 or _la==278):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1010
                        localctx.intoExpr = self.specialExpr()


                    self.state = 1016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==211:
                        self.state = 1013
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1014
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 1015
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1020
                self.match(VisualFoxpro9Parser.USE)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1034
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1021
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1022
                        localctx.workArea = self.specialExpr()
                        pass

                    elif la_ == 2:
                        self.state = 1023
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1025
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                        if la_ == 1:
                            self.state = 1024
                            self.match(VisualFoxpro9Parser.TAG)


                        self.state = 1027
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 1028
                        self.match(VisualFoxpro9Parser.ALIAS)
                        self.state = 1029
                        localctx.aliasExpr = self.specialExpr()
                        pass

                    elif la_ == 4:
                        self.state = 1030
                        self.match(VisualFoxpro9Parser.SHARED)
                        pass

                    elif la_ == 5:
                        self.state = 1031
                        self.match(VisualFoxpro9Parser.EXCLUSIVE)
                        pass

                    elif la_ == 6:
                        self.state = 1032
                        self.match(VisualFoxpro9Parser.NOUPDATE)
                        pass

                    elif la_ == 7:
                        self.state = 1033
                        localctx.name = self.specialExpr()
                        pass


                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1039
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or (((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 145241087982698497) != 0 or _la==231 or _la==243 or _la==304:
                    self.state = 1040
                    self.queryCondition()
                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1046
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.RetryContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1047
                self.match(VisualFoxpro9Parser.RETRY)
                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1048
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1054
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1049
                        self.queryCondition()
                        pass

                    elif la_ == 2:
                        self.state = 1050
                        self.specialExpr()
                        self.state = 1051
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 1052
                        self.expr(0)
                        pass


                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1059
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1060
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1061
                self.specialExpr()
                self.state = 1062
                _la = self._input.LA(1)
                if not(_la==280 or _la==288):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1063
                self.specialExpr()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1064
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==100:
                    self.state = 1067
                    _la = self._input.LA(1)
                    if not(_la==51 or _la==100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63 or _la==295:
                    self.state = 1070
                    _la = self._input.LA(1)
                    if not(_la==63 or _la==295):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1073
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1076
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or (((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 145241087982698497) != 0 or (((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & 144115188075859969) != 0 or _la==304:
                    self.state = 1080
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [288]:
                        self.state = 1077
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1078
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [44, 137, 187, 194, 231, 243, 304]:
                        self.state = 1079
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1085
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1090
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1086
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1087
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1088
                        self.queryCondition()
                        pass

                    elif la_ == 3:
                        self.state = 1089
                        localctx.sumExpr = self.expr(0)
                        pass


                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.SortCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1095
                self.match(VisualFoxpro9Parser.SORT)
                self.state = 1096
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1097
                self.expr(0)
                self.state = 1098
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1099
                self.expr(0)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==10:
                    self.state = 1100
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1101
                    self.identifier()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==30:
                    self.state = 1107
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1108
                    self.expr(0)
                    self.state = 1113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==10:
                        self.state = 1109
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1110
                        self.identifier()
                        self.state = 1115
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or _la==51 or (((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 138512695297) != 0 or (((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & 72075186223972481) != 0 or _la==304:
                    self.state = 1129
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51]:
                        self.state = 1121
                        self.match(VisualFoxpro9Parser.ASCENDING)
                        pass
                    elif token in [100]:
                        self.state = 1122
                        self.match(VisualFoxpro9Parser.DESCENDING)
                        pass
                    elif token in [130]:
                        self.state = 1123
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1125
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                        if la_ == 1:
                            self.state = 1124
                            _la = self._input.LA(1)
                            if not(_la==126 or _la==163):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1127
                        self.args()
                        pass
                    elif token in [44, 137, 187, 194, 231, 243, 304]:
                        self.state = 1128
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1134
                _la = self._input.LA(1)
                if not(_la==98 or _la==230):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or (((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 145241087982731265) != 0 or _la==231 or _la==243 or _la==304:
                    self.state = 1138
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [44, 137, 187, 194, 231, 243, 304]:
                        self.state = 1135
                        self.queryCondition()
                        pass
                    elif token in [152]:
                        self.state = 1136
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1137
                        localctx.inExpr = self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1143
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1144
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1145
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 1146
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1147
                    self.specialExpr()
                    self.state = 1148
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 1149
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1151
                    self.specialExpr()
                    pass


                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 1154
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 1155
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1158
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 1159
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1163
                    self.specialExpr()
                    self.state = 1164
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 1166
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1167
                    self.specialExpr()


                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1170
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 1171
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1172
                self.specialExpr()
                self.state = 1192
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [143]:
                    self.state = 1173
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1179
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [49]:
                        self.state = 1174
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1175
                        self.expr(0)
                        pass
                    elif token in [176]:
                        self.state = 1176
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [184]:
                        self.state = 1177
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1178
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [16, 300]:
                    self.state = 1185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==16:
                        self.state = 1181
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 1182
                        self.specialArgs()
                        self.state = 1183
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 1187
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 1188
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1189
                    self.args()
                    self.state = 1190
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1194
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 1196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1195
                    self.expr(0)


                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1198
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1199
                    self.specialExpr()


                pass

            elif la_ == 49:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1202
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 1216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1203
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 1205
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                    if la_ == 1:
                        self.state = 1204
                        _la = self._input.LA(1)
                        if not(_la==91 or _la==173):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1214
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                    if la_ == 1:
                        self.state = 1207
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1208
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 1209
                        localctx.tableName = self.specialExpr()
                        self.state = 1210
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1211
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 1213
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 50:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1218
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1219
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 51:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1222
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 1223
                localctx.seekExpr = self.expr(0)
                self.state = 1238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                    if la_ == 1:
                        self.state = 1224
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1225
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1226
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 1227
                        localctx.tagName = self.specialExpr()
                        self.state = 1230
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==207:
                            self.state = 1228
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 1229
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 1232
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 1236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==51 or _la==100:
                        self.state = 1235
                        _la = self._input.LA(1)
                        if not(_la==51 or _la==100):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1240
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1241
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 52:
                localctx = VisualFoxpro9Parser.UpdateCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1244
                self.match(VisualFoxpro9Parser.UPDATE)
                self.state = 1245
                localctx.tableExpr = self.specialExpr()
                self.state = 1246
                self.match(VisualFoxpro9Parser.SET)
                self.state = 1247
                self.identifier()
                self.state = 1248
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1249
                self.expr(0)
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==30:
                    self.state = 1250
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1251
                    self.identifier()
                    self.state = 1252
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 1253
                    self.expr(0)
                    self.state = 1259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==143 or _la==158 or _la==303:
                    self.state = 1269
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [143]:
                        self.state = 1260
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1262
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                        if la_ == 1:
                            self.state = 1261
                            self.match(VisualFoxpro9Parser.FORCE)


                        self.state = 1264
                        localctx.fromArgs = self.specialArgs()
                        pass
                    elif token in [158]:
                        self.state = 1265
                        self.match(VisualFoxpro9Parser.JOIN)
                        self.state = 1266
                        localctx.joinArgs = self.specialArgs()
                        pass
                    elif token in [303]:
                        self.state = 1267
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 1268
                        localctx.whereExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 53:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1274
                self.match(VisualFoxpro9Parser.GOTO)
                self.state = 1281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1275
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 1276
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 1278
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1277
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 1280
                    self.expr(0)
                    pass


                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1283
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1284
                    self.specialExpr()


                pass

            elif la_ == 54:
                localctx = VisualFoxpro9Parser.CopyToArrayContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1287
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or (((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 144115188075856001) != 0 or (((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 563087392374785) != 0 or _la==288 or _la==304:
                    self.state = 1297
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [288]:
                        self.state = 1288
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1289
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1290
                        self.specialExpr()
                        pass
                    elif token in [130]:
                        self.state = 1291
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1293
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                        if la_ == 1:
                            self.state = 1292
                            _la = self._input.LA(1)
                            if not(_la==126 or _la==163):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1295
                        self.args()
                        pass
                    elif token in [44, 137, 187, 194, 231, 243, 304]:
                        self.state = 1296
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 55:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1302
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 1303
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1306
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1307
                self.specialExpr()
                pass

            elif la_ == 56:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1308
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1309
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1310
                    self.specialExpr()


                pass

            elif la_ == 57:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1313
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                    self.state = 1314
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 58:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1320
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==58 or (((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18093563346681857) != 0 or _la==288:
                    self.state = 1336
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [130]:
                        self.state = 1321
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1323
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                        if la_ == 1:
                            self.state = 1322
                            _la = self._input.LA(1)
                            if not(_la==126 or _la==163):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1325
                        self.args()
                        pass
                    elif token in [173]:
                        self.state = 1326
                        self.match(VisualFoxpro9Parser.MEMO)
                        pass
                    elif token in [58]:
                        self.state = 1327
                        self.match(VisualFoxpro9Parser.BLANK)
                        pass
                    elif token in [176]:
                        self.state = 1328
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [184]:
                        self.state = 1329
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1330
                        self.expr(0)
                        self.state = 1332
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==41:
                            self.state = 1331
                            self.match(VisualFoxpro9Parser.ADDITIVE)


                        pass
                    elif token in [288]:
                        self.state = 1334
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1335
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 59:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1341
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 18093563346690049) != 0:
                    self.state = 1353
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [130]:
                        self.state = 1342
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1344
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1343
                            _la = self._input.LA(1)
                            if not(_la==126 or _la==163):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1346
                        self.args()
                        pass
                    elif token in [173]:
                        self.state = 1347
                        self.match(VisualFoxpro9Parser.MEMO)
                        pass
                    elif token in [176]:
                        self.state = 1348
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [184]:
                        self.state = 1349
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1350
                        self.expr(0)
                        pass
                    elif token in [143]:
                        self.state = 1351
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1352
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 60:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1358
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1364
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [87, 155, 278]:
                    self.state = 1359
                    _la = self._input.LA(1)
                    if not(_la==87 or _la==155 or _la==278):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==44:
                        self.state = 1360
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [44]:
                    self.state = 1363
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 61:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [229]:
                    self.state = 1366
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==124:
                        self.state = 1367
                        self.match(VisualFoxpro9Parser.EVENTS)


                    pass
                elif token in [105]:
                    self.state = 1370
                    self.match(VisualFoxpro9Parser.DOEVENTS)
                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 1371
                        self.match(VisualFoxpro9Parser.FORCE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 62:
                localctx = VisualFoxpro9Parser.UnlockCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1376
                self.match(VisualFoxpro9Parser.UNLOCK)
                self.state = 1377
                self.match(VisualFoxpro9Parser.ALL)
                pass

            elif la_ == 63:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1378
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 1379
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [69]:
                    self.state = 1380
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1381
                    self.expr(0)
                    pass
                elif token in [70]:
                    self.state = 1382
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1383
                    self.specialExpr()
                    pass
                elif token in [93]:
                    self.state = 1384
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [103]:
                    self.state = 1385
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1386
                    self.specialArgs()
                    pass
                elif token in [124]:
                    self.state = 1387
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [122]:
                    self.state = 1388
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [130]:
                    self.state = 1389
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [145]:
                    self.state = 1390
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [168]:
                    self.state = 1391
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [174]:
                    self.state = 1392
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [178]:
                    self.state = 1393
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [221]:
                    self.state = 1394
                    self.match(VisualFoxpro9Parser.POPUP)
                    pass
                elif token in [225]:
                    self.state = 1395
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [227]:
                    self.state = 1396
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [229]:
                    self.state = 1397
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==44:
                        self.state = 1398
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [242]:
                    self.state = 1401
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1402
                    self.expr(0)
                    pass
                elif token in [292]:
                    self.state = 1403
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [305]:
                    self.state = 1404
                    self.match(VisualFoxpro9Parser.WINDOW)
                    pass
                elif token in [-1, 310]:
                    pass
                else:
                    pass
                pass

            elif la_ == 64:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1407
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1408
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1411
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [33]:
                    self.state = 1409
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                    self.state = 1410
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==189 or _la==191 or _la==288:
                    self.state = 1420
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [191]:
                        self.state = 1413
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [288]:
                        self.state = 1414
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1415
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1417
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==227:
                            self.state = 1416
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [189]:
                        self.state = 1419
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 65:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1425
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1426
                    localctx.returnType = self.datatype()


                self.state = 1429
                self.identifier()
                self.state = 1430
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1431
                self.specialExpr()
                self.state = 1434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1432
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1433
                    localctx.alias = self.identifier()


                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755811840) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1436
                    self.dllArgs()


                pass

            elif la_ == 66:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1439
                _la = self._input.LA(1)
                if not(_la==21 or _la==249):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1441
                    self.identifier()


                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                    self.state = 1444
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==310:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 67:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1450
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1451
                self.expr(0)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 1452
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1453
                    self.expr(0)


                pass

            elif la_ == 68:
                localctx = VisualFoxpro9Parser.CompileCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1456
                self.match(VisualFoxpro9Parser.COMPILE)
                self.state = 1458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1457
                    _la = self._input.LA(1)
                    if not(_la==70 or _la==87 or _la==139 or _la==161 or _la==241):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                    if la_ == 1:
                        self.state = 1460
                        self.match(VisualFoxpro9Parser.ALL)
                        pass

                    elif la_ == 2:
                        self.state = 1461
                        self.match(VisualFoxpro9Parser.ENCRYPT)
                        pass

                    elif la_ == 3:
                        self.state = 1462
                        self.match(VisualFoxpro9Parser.NODEBUG)
                        pass

                    elif la_ == 4:
                        self.state = 1463
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 1464
                        self.specialExpr()
                        pass

                    elif la_ == 5:
                        self.state = 1465
                        self.specialExpr()
                        pass


                    self.state = 1470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 69:
                localctx = VisualFoxpro9Parser.ListStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1471
                self.match(VisualFoxpro9Parser.LIST)
                self.state = 1472
                self.scopeClause()
                pass

            elif la_ == 70:
                localctx = VisualFoxpro9Parser.SaveToCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1473
                self.match(VisualFoxpro9Parser.SAVE)
                self.state = 1474
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1475
                    self.match(VisualFoxpro9Parser.MEMO)
                    self.state = 1476
                    self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 1477
                    self.specialExpr()
                    pass


                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 1480
                    self.match(VisualFoxpro9Parser.ALL)
                    self.state = 1481
                    _la = self._input.LA(1)
                    if not(_la==126 or _la==163):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1482
                    self.specialExpr()


                pass

            elif la_ == 71:
                localctx = VisualFoxpro9Parser.RestoreCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1485
                self.match(VisualFoxpro9Parser.RESTORE)
                self.state = 1486
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1487
                self.specialExpr()
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1488
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 72:
                localctx = VisualFoxpro9Parser.ZoomCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1491
                self.match(VisualFoxpro9Parser.ZOOM)
                self.state = 1492
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1493
                self.specialExpr()
                self.state = 1494
                _la = self._input.LA(1)
                if not((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 16777473) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 1495
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1496
                    self.expr(0)
                    self.state = 1497
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1498
                    self.expr(0)
                    pass
                elif token in [143]:
                    self.state = 1500
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1501
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1502
                    self.expr(0)
                    self.state = 1503
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1504
                    self.expr(0)
                    self.state = 1516
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [267]:
                        self.state = 1505
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 1506
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 1507
                        self.expr(0)
                        self.state = 1508
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1509
                        self.expr(0)
                        pass
                    elif token in [288]:
                        self.state = 1511
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1512
                        self.expr(0)
                        self.state = 1513
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1514
                        self.expr(0)
                        pass
                    elif token in [-1, 310]:
                        pass
                    else:
                        pass
                    pass
                elif token in [-1, 310]:
                    pass
                else:
                    pass
                pass

            elif la_ == 73:
                localctx = VisualFoxpro9Parser.TextBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1520
                self.match(VisualFoxpro9Parser.TEXT)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==41 or _la==135 or _la==198 or _la==222 or _la==283 or _la==288:
                    self.state = 1530
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [288]:
                        self.state = 1521
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1522
                        self.idAttr()
                        pass
                    elif token in [41]:
                        self.state = 1523
                        self.match(VisualFoxpro9Parser.ADDITIVE)
                        pass
                    elif token in [283]:
                        self.state = 1524
                        self.match(VisualFoxpro9Parser.TEXTMERGE)
                        pass
                    elif token in [198]:
                        self.state = 1525
                        self.match(VisualFoxpro9Parser.NOSHOW)
                        pass
                    elif token in [135]:
                        self.state = 1526
                        self.match(VisualFoxpro9Parser.FLAGS)
                        self.state = 1527
                        localctx.flagExpr = self.expr(0)
                        pass
                    elif token in [222]:
                        self.state = 1528
                        self.match(VisualFoxpro9Parser.PRETEXT)
                        self.state = 1529
                        localctx.pretext = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1535
                self.match(VisualFoxpro9Parser.NL)
                self.state = 1536
                self.textChunk()
                self.state = 1537
                self.match(VisualFoxpro9Parser.ENDTEXT)
                pass

            elif la_ == 74:
                localctx = VisualFoxpro9Parser.ShowCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1539
                self.match(VisualFoxpro9Parser.SHOW)
                self.state = 1540
                self.match(VisualFoxpro9Parser.GETS)
                pass

            elif la_ == 75:
                localctx = VisualFoxpro9Parser.HideCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1541
                self.match(VisualFoxpro9Parser.HIDE)
                self.state = 1542
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1546
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1544
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 3:
                    self.state = 1545
                    self.args()
                    pass


                pass

            elif la_ == 76:
                localctx = VisualFoxpro9Parser.ExprCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1548
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1549
                self.expr(0)
                pass

            elif la_ == 77:
                localctx = VisualFoxpro9Parser.ComplexIdCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1550
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_queryCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryCondition" ):
                return visitor.visitQueryCondition(self)
            else:
                return visitor.visitChildren(self)




    def queryCondition(self):

        localctx = VisualFoxpro9Parser.QueryConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queryCondition)
        try:
            self.state = 1559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 187, 231, 243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.scopeClause()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 1555
                self.expr(0)
                pass
            elif token in [304]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1556
                self.match(VisualFoxpro9Parser.WHILE)
                self.state = 1557
                self.expr(0)
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1558
                self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextChunkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDTEXT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENDTEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENDTEXT, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_textChunk

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextChunk" ):
                return visitor.visitTextChunk(self)
            else:
                return visitor.visitChildren(self)




    def textChunk(self):

        localctx = VisualFoxpro9Parser.TextChunkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_textChunk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -18014398509481985) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 144115188075855871) != 0:
                self.state = 1561
                _la = self._input.LA(1)
                if _la <= 0 or _la==118:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllArgs" ):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.dllArg()
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30:
                self.state = 1568
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1569
                self.dllArg()
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllArg" ):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.datatype()
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 1576
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -549755813888) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                self.state = 1579
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tableField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableField" ):
                return visitor.visitTableField(self)
            else:
                return visitor.visitChildren(self)




    def tableField(self):

        localctx = VisualFoxpro9Parser.TableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.identifier()
            self.state = 1583
            self.identifier()
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==16:
                self.state = 1584
                self.arrayIndex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.CONSOLE, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DATASESSION(self):
            return self.getToken(VisualFoxpro9Parser.DATASESSION, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def ESCAPE(self):
            return self.getToken(VisualFoxpro9Parser.ESCAPE, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UDFPARMS(self):
            return self.getToken(VisualFoxpro9Parser.UDFPARMS, 0)

        def VALUE(self):
            return self.getToken(VisualFoxpro9Parser.VALUE, 0)

        def REFERENCE(self):
            return self.getToken(VisualFoxpro9Parser.REFERENCE, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCmd" ):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1587
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1588
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1589
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1590
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1591
                    self.specialExpr()
                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==41:
                        self.state = 1592
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [52, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1597
                localctx.setword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==52 or _la==53):
                    localctx.setword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1598
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1599
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1604
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1600
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1601
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1602
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1603
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1606
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1617
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1607
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1608
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1609
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1610
                        self.expr(0)
                        self.state = 1613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==248:
                            self.state = 1611
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1612
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1619
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1620
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1621
                self.specialExpr()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1622
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1623
                    self.specialExpr()


                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 1626
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1627
                    self.specialExpr()


                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1630
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1633
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1644
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1634
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1635
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [270]:
                    self.state = 1636
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [288]:
                    self.state = 1637
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -496066536628) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1638
                        self.expr(0)
                        self.state = 1639
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1640
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1646
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1647
                _la = self._input.LA(1)
                if not(_la==90 or _la==141 or _la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195 or _la==227:
                    self.state = 1648
                    _la = self._input.LA(1)
                    if not(_la==195 or _la==227):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1651
                localctx.setword = self.match(VisualFoxpro9Parser.CONSOLE)
                self.state = 1652
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1653
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1654
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1655
                localctx.setword = self.match(VisualFoxpro9Parser.DATABASE)
                self.state = 1656
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1657
                self.specialExpr()
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1658
                localctx.setword = self.match(VisualFoxpro9Parser.DATASESSION)
                self.state = 1659
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1660
                self.expr(0)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1661
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1665
                self.identifier()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1666
                localctx.setword = self.match(VisualFoxpro9Parser.DEFAULT)
                self.state = 1667
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1668
                self.specialExpr()
                pass
            elif token in [98, 99]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1669
                localctx.setword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==98 or _la==99):
                    localctx.setword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1670
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1671
                localctx.setword = self.match(VisualFoxpro9Parser.ESCAPE)
                self.state = 1672
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1673
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1674
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1675
                localctx.setword = self.match(VisualFoxpro9Parser.EXCLUSIVE)
                self.state = 1676
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1677
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1678
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1679
                    self.specialExpr()
                    self.state = 1682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==152:
                        self.state = 1680
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1681
                        self.specialExpr()




                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1686
                localctx.setword = self.match(VisualFoxpro9Parser.HELP)
                self.state = 1698
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1687
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1688
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1689
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1690
                        self.specialExpr()


                    pass
                elif token in [74]:
                    self.state = 1693
                    self.match(VisualFoxpro9Parser.COLLECTION)
                    self.state = 1695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1694
                        self.specialExpr()


                    pass
                elif token in [277]:
                    self.state = 1697
                    self.match(VisualFoxpro9Parser.SYSTEM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1700
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1701
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1702
                    self.specialExpr()


                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1705
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1706
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1707
                self.specialExpr()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1708
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1711
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1712
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1713
                self.expr(0)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1714
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1715
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1716
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1717
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1718
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1719
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1722
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1723
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1724
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1727
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 1726
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1729
                    self.specialExpr()
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 1730
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1731
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==152:
                        self.state = 1734
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1735
                        localctx.inExpr = self.specialExpr()


                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==51 or _la==100:
                        self.state = 1738
                        _la = self._input.LA(1)
                        if not(_la==51 or _la==100):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1743
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1759
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1744
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==227:
                        self.state = 1745
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [208]:
                    self.state = 1748
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1749
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1757
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                    if la_ == 1:
                        self.state = 1750
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1751
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1752
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1753
                        self.specialExpr()
                        self.state = 1755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==41:
                            self.state = 1754
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1761
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1762
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494023476354) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                    self.state = 1763
                    self.specialExpr()
                    self.state = 1768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==30:
                        self.state = 1764
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1765
                        self.specialExpr()
                        self.state = 1770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==41:
                        self.state = 1771
                        self.match(VisualFoxpro9Parser.ADDITIVE)




                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1776
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1777
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1778
                self.expr(0)
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1779
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1780
                    self.expr(0)


                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1783
                localctx.setword = self.match(VisualFoxpro9Parser.RELATION)
                self.state = 1784
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1785
                self.expr(0)
                self.state = 1786
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1787
                self.specialExpr()
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1788
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1789
                    self.specialExpr()


                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1792
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1795
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1796
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1797
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55:
                    self.state = 1798
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1801
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1802
                localctx.setword = self.match(VisualFoxpro9Parser.STEP)
                self.state = 1803
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1804
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1814
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [209]:
                    self.state = 1805
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [208]:
                    self.state = 1806
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [288]:
                    self.state = 1807
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1810
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                    if la_ == 1:
                        self.state = 1808
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1809
                        self.expr(0)


                    pass
                elif token in [252]:
                    self.state = 1812
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [197]:
                    self.state = 1813
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [279]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1816
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1817
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1818
                localctx.setword = self.match(VisualFoxpro9Parser.TALK)
                self.state = 1819
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1820
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1821
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1822
                self.expr(0)
                pass
            elif token in [293]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1823
                localctx.setword = self.match(VisualFoxpro9Parser.UDFPARMS)
                self.state = 1824
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1825
                _la = self._input.LA(1)
                if not(_la==233 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1826
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1827
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declarationItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationItem" ):
                return visitor.visitDeclarationItem(self)
            else:
                return visitor.visitChildren(self)




    def declarationItem(self):

        localctx = VisualFoxpro9Parser.DeclarationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_declarationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 1830
                self.idAttr2()
                self.state = 1831
                self.arrayIndex()
                pass

            elif la_ == 2:
                self.state = 1833
                self.idAttr()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1834
                    self.asTypeOf()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsType" ):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = VisualFoxpro9Parser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.match(VisualFoxpro9Parser.AS)
            self.state = 1840
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeOfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asTypeOf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsTypeOf" ):
                return visitor.visitAsTypeOf(self)
            else:
                return visitor.visitChildren(self)




    def asTypeOf(self):

        localctx = VisualFoxpro9Parser.AsTypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_asTypeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.asType()
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==207:
                self.state = 1843
                self.match(VisualFoxpro9Parser.OF)
                self.state = 1844
                self.specialExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argsItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgsItem" ):
                return visitor.visitArgsItem(self)
            else:
                return visitor.visitChildren(self)




    def argsItem(self):

        localctx = VisualFoxpro9Parser.ArgsItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argsItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1848
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def argsItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsItemContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.state = 1863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 6, 8, 9, 11, 12, 14, 16, 21, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1851
                self.expr(0)
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==30:
                    self.state = 1852
                    self.argsItem()
                    self.state = 1857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1858
                    self.argsItem()
                    self.state = 1861 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==30):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialArgs" ):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self.specialExpr()
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30:
                self.state = 1866
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1867
                self.specialExpr()
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference" ):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1874
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def DOUBLEEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.DOUBLEEQUALS, 0)
        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)
        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def GREATERTHAN(self):
            return self.getToken(VisualFoxpro9Parser.GREATERTHAN, 0)
        def GTEQ(self):
            return self.getToken(VisualFoxpro9Parser.GTEQ, 0)
        def LESSTHAN(self):
            return self.getToken(VisualFoxpro9Parser.LESSTHAN, 0)
        def LTEQ(self):
            return self.getToken(VisualFoxpro9Parser.LTEQ, 0)
        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpr" ):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubExpr" ):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)
        def OTHERNOT(self):
            return self.getToken(VisualFoxpro9Parser.OTHERNOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanNegation" ):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryNegation" ):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOrContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def orOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OrOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOr" ):
                return visitor.visitBooleanOr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ASTERISK)
            else:
                return self.getToken(VisualFoxpro9Parser.ASTERISK, i)
        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)
        def FORWARDSLASH(self):
            return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplication" ):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MODULO(self):
            return self.getToken(VisualFoxpro9Parser.MODULO, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModulo" ):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpr" ):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddition" ):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)


    class BooleanAndContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def andOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AndOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanAnd" ):
                return visitor.visitBooleanAnd(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1877
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1878
                self.expr(0)
                self.state = 1879
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1881
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1882
                self.expr(12)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1883
                _la = self._input.LA(1)
                if not(_la==21 or _la==199 or _la==213):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1884
                self.expr(11)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1885
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1886
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1887
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1888
                self.expr(0)
                self.state = 1889
                self.asType()
                self.state = 1890
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 1892
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1893
                    self.idAttr()
                    self.state = 1894
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1895
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1899
                self.atom()
                self.state = 1901
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1900
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1932
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1905
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1909
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [7]:
                            self.state = 1906
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1907
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [29]:
                            self.state = 1908
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1911
                        self.expr(11)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1912
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1913
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==7 or _la==10):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1914
                        self.expr(10)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1915
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1916
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1917
                        self.expr(9)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1918
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1919
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==8 or _la==9):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1920
                        self.expr(8)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1921
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1922
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2547515392) != 0):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1923
                        self.expr(7)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanAndContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1924
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1925
                        self.andOp()
                        self.state = 1926
                        self.expr(6)
                        pass

                    elif la_ == 7:
                        localctx = VisualFoxpro9Parser.BooleanOrContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1928
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1929
                        self.orOp()
                        self.state = 1930
                        self.expr(5)
                        pass

             
                self.state = 1936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OTHERAND(self):
            return self.getToken(VisualFoxpro9Parser.OTHERAND, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_andOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOp" ):
                return visitor.visitAndOp(self)
            else:
                return visitor.visitChildren(self)




    def andOp(self):

        localctx = VisualFoxpro9Parser.AndOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_andOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            _la = self._input.LA(1)
            if not(_la==47 or _la==212):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OTHEROR(self):
            return self.getToken(VisualFoxpro9Parser.OTHEROR, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_orOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrOp" ):
                return visitor.visitOrOp(self)
            else:
                return visitor.visitChildren(self)




    def orOp(self):

        localctx = VisualFoxpro9Parser.OrOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_orOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1939
            _la = self._input.LA(1)
            if not(_la==210 or _la==214):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexId" ):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 1941
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1942
                    self.idAttr()
                    self.state = 1943
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1944
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1948
                self.atom()
                self.state = 1949
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 1951
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass

                elif la_ == 2:
                    self.state = 1952
                    self.idAttr()
                    self.state = 1953
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1954
                    self.match(VisualFoxpro9Parser.COLON)
                    pass


                self.state = 1958
                self.atom()
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 71680) != 0:
                    self.state = 1959
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atom)
        try:
            self.state = 1966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1964
                self.identifier()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.TrailerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)
        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)
        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCallTrailer" ):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.TrailerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentTrailer" ):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 16]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1978
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16]:
                    self.state = 1968
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494992794804) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1969
                        self.args()


                    self.state = 1972
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [12]:
                    self.state = 1973
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & -494992794804) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -5242881) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0:
                        self.state = 1974
                        self.args()


                    self.state = 1977
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 1980
                    self.trailer()


                pass
            elif token in [11]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1983
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1984
                self.identifier()
                self.state = 1986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 1985
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(VisualFoxpro9Parser.COLON, 0)

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathname" ):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 1990
                self.identifier()
                self.state = 1991
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1996 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1995
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1998 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def SEMICOLON(self):
            return self.getToken(VisualFoxpro9Parser.SEMICOLON, 0)

        def AMPERSAND(self):
            return self.getToken(VisualFoxpro9Parser.AMPERSAND, 0)

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)

        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)

        def LEFTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACE, 0)

        def RIGHTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACE, 0)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)

        def DOUBLEEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.DOUBLEEQUALS, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def MODULO(self):
            return self.getToken(VisualFoxpro9Parser.MODULO, 0)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)

        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathElement" ):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_pathElement)
        try:
            self.state = 2025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self.identifier()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2001
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2002
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2003
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2004
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2005
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2006
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2007
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2008
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2009
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2010
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2011
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2012
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2013
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2014
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2015
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2016
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2017
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2018
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2019
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2020
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2021
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2022
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2023
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2024
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialExpr" ):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_specialExpr)
        try:
            self.state = 2029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2027
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2028
                self.pathname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACE, 0)
        def RIGHTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACE, 0)
        def FORWARDSLASH(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORWARDSLASH)
            else:
                return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)
        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)
        def NUMBER_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MINUS_SIGN)
            else:
                return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate" ):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class BoolOrNullContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PERIOD)
            else:
                return self.getToken(VisualFoxpro9Parser.PERIOD, i)
        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)
        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOrNull" ):
                return visitor.visitBoolOrNull(self)
            else:
                return visitor.visitChildren(self)


    class BlobContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BLOB_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.BLOB_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlob" ):
                return visitor.visitBlob(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SINGLEQUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SINGLEQUOTE)
            else:
                return self.getToken(VisualFoxpro9Parser.SINGLEQUOTE, i)
        def DOUBLEQUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DOUBLEQUOTE)
            else:
                return self.getToken(VisualFoxpro9Parser.DOUBLEQUOTE, i)
        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)
        def RIGHTBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.RIGHTBRACKET)
            else:
                return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, i)
        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class NumberOrCurrencyContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualFoxpro9Parser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberOrCurrency" ):
                return visitor.visitNumberOrCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 2103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 31]:
                localctx = VisualFoxpro9Parser.NumberOrCurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 2031
                    self.match(VisualFoxpro9Parser.DOLLAR)


                self.state = 2034
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [11, 204]:
                localctx = VisualFoxpro9Parser.BoolOrNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [11]:
                    self.state = 2035
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 2036
                    _la = self._input.LA(1)
                    if not(_la==59 or _la==204):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2037
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [204]:
                    self.state = 2038
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [14]:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2041
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 2073
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 2042
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 2043
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [32]:
                    self.state = 2044
                    self.match(VisualFoxpro9Parser.COLON)
                    pass
                elif token in [29]:
                    self.state = 2045
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 2056
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                    if la_ == 1:
                        self.state = 2046
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2047
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2048
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2049
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2050
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass

                    elif la_ == 2:
                        self.state = 2051
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2052
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2053
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2054
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2055
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass


                    self.state = 2071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2 or _la==30:
                        self.state = 2059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==30:
                            self.state = 2058
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 2061
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2068
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==32:
                            self.state = 2062
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 2063
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 2066
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==32:
                                self.state = 2064
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 2065
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 2070
                        self.identifier()


                    pass
                elif token in [15]:
                    pass
                else:
                    pass
                self.state = 2075
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [12, 34, 35]:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2100
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35]:
                    self.state = 2076
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    self.state = 2080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((_la) & ~0x3f) == 0 and ((1 << _la) & -34359738370) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                        self.state = 2077
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==35 or _la==310:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2082
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2083
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    pass
                elif token in [34]:
                    self.state = 2084
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    self.state = 2088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((_la) & ~0x3f) == 0 and ((1 << _la) & -17179869186) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                        self.state = 2085
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==34 or _la==310:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2091
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    pass
                elif token in [12]:
                    self.state = 2092
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 2096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((_la) & ~0x3f) == 0 and ((1 << _la) & -8194) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 126100789566373887) != 0:
                        self.state = 2093
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==13 or _la==310:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2099
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [3]:
                localctx = VisualFoxpro9Parser.BlobContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2102
                self.match(VisualFoxpro9Parser.BLOB_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdAttr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PERIOD)
            else:
                return self.getToken(VisualFoxpro9Parser.PERIOD, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdAttr2" ):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2105
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2108
            self.identifier()
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 2109
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 2110
                self.identifier()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdAttr" ):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2116
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2119
            self.identifier()
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2120
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TwoExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTwoExpr" ):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.expr(0)
            self.state = 2124
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 2125
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)

        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayIndex" ):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayIndex)
        try:
            self.state = 2141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2127
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 2130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2128
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2129
                    self.twoExpr()
                    pass


                self.state = 2132
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2134
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 2137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2135
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2136
                    self.twoExpr()
                    pass


                self.state = 2139
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScopeClause" ):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_scopeClause)
        try:
            self.state = 2151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2145
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2146
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 2147
                self.expr(0)
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2148
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 2149
                self.expr(0)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2150
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)

        def CONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.CONSOLE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DATASESSION(self):
            return self.getToken(VisualFoxpro9Parser.DATASESSION, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENCRYPT(self):
            return self.getToken(VisualFoxpro9Parser.ENCRYPT, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(VisualFoxpro9Parser.ESCAPE, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def FILL(self):
            return self.getToken(VisualFoxpro9Parser.FILL, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def FLAGS(self):
            return self.getToken(VisualFoxpro9Parser.FLAGS, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def FOXOBJECT(self):
            return self.getToken(VisualFoxpro9Parser.FOXOBJECT, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)

        def ICON(self):
            return self.getToken(VisualFoxpro9Parser.ICON, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def JOIN(self):
            return self.getToken(VisualFoxpro9Parser.JOIN, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def LINKED(self):
            return self.getToken(VisualFoxpro9Parser.LINKED, 0)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MASTER(self):
            return self.getToken(VisualFoxpro9Parser.MASTER, 0)

        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)

        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)

        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def NODEBUG(self):
            return self.getToken(VisualFoxpro9Parser.NODEBUG, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def NOUPDATE(self):
            return self.getToken(VisualFoxpro9Parser.NOUPDATE, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def PRETEXT(self):
            return self.getToken(VisualFoxpro9Parser.PRETEXT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def REFERENCE(self):
            return self.getToken(VisualFoxpro9Parser.REFERENCE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)

        def RETRY(self):
            return self.getToken(VisualFoxpro9Parser.RETRY, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def SAY(self):
            return self.getToken(VisualFoxpro9Parser.SAY, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)

        def TEXTMERGE(self):
            return self.getToken(VisualFoxpro9Parser.TEXTMERGE, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def TITLE(self):
            return self.getToken(VisualFoxpro9Parser.TITLE, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UDFPARMS(self):
            return self.getToken(VisualFoxpro9Parser.UDFPARMS, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def VALUE(self):
            return self.getToken(VisualFoxpro9Parser.VALUE, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WHEN(self):
            return self.getToken(VisualFoxpro9Parser.WHEN, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -549755813888) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -67108865) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -7340033) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 18014398509481983) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[44] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         




